/*
* generated by Xtext
*/
package org.lunifera.doc.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class LuniferaDocGrammarGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class NamedDocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedDocument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDocLayouterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDocumentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NamedDocument returns doc::LDocNamedDocument:
		//	DocLayouter | Document;
		public ParserRule getRule() { return rule; }

		//DocLayouter | Document
		public Alternatives getAlternatives() { return cAlternatives; }

		//DocLayouter
		public RuleCall getDocLayouterParserRuleCall_0() { return cDocLayouterParserRuleCall_0; }

		//Document
		public RuleCall getDocumentParserRuleCall_1() { return cDocumentParserRuleCall_1; }
	}

	public class DocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Document");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityDocumentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDTODocumentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBPMProcessDocumentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBPMHumanTaskDocumentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVaaclipseViewDocumentParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cUIDocumentParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Document returns doc::LDocDocument:
		//	EntityDocument | DTODocument | BPMProcessDocument | BPMHumanTaskDocument | VaaclipseViewDocument | UIDocument;
		public ParserRule getRule() { return rule; }

		//EntityDocument | DTODocument | BPMProcessDocument | BPMHumanTaskDocument | VaaclipseViewDocument | UIDocument
		public Alternatives getAlternatives() { return cAlternatives; }

		//EntityDocument
		public RuleCall getEntityDocumentParserRuleCall_0() { return cEntityDocumentParserRuleCall_0; }

		//DTODocument
		public RuleCall getDTODocumentParserRuleCall_1() { return cDTODocumentParserRuleCall_1; }

		//BPMProcessDocument
		public RuleCall getBPMProcessDocumentParserRuleCall_2() { return cBPMProcessDocumentParserRuleCall_2; }

		//BPMHumanTaskDocument
		public RuleCall getBPMHumanTaskDocumentParserRuleCall_3() { return cBPMHumanTaskDocumentParserRuleCall_3; }

		//VaaclipseViewDocument
		public RuleCall getVaaclipseViewDocumentParserRuleCall_4() { return cVaaclipseViewDocumentParserRuleCall_4; }

		//UIDocument
		public RuleCall getUIDocumentParserRuleCall_5() { return cUIDocumentParserRuleCall_5; }
	}

	public class DocLayouterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DocLayouter");
		private final RuleCall cGeneralDocumentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DocLayouter returns doc::LDocLayouter:
		//	GeneralDocument;
		public ParserRule getRule() { return rule; }

		//GeneralDocument
		public RuleCall getGeneralDocumentParserRuleCall() { return cGeneralDocumentParserRuleCall; }
	}

	public class DocumentIncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DocumentInclude");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cIncludeKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cDocumentAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final CrossReference cDocumentLDocDocumentCrossReference_0_0_1_0 = (CrossReference)cDocumentAssignment_0_0_1.eContents().get(0);
		private final RuleCall cDocumentLDocDocumentQualifiedNameParserRuleCall_0_0_1_0_1 = (RuleCall)cDocumentLDocDocumentCrossReference_0_0_1_0.eContents().get(1);
		private final Keyword cAsKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cVarNameAssignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cVarNameIDTerminalRuleCall_0_0_3_0 = (RuleCall)cVarNameAssignment_0_0_3.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cProvidedAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final Keyword cProvidedProvidedKeyword_0_1_0_0 = (Keyword)cProvidedAssignment_0_1_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1_1 = (Alternatives)cGroup_0_1.eContents().get(1);
		private final Assignment cProvidedTypeAssignment_0_1_1_0 = (Assignment)cAlternatives_0_1_1.eContents().get(0);
		private final RuleCall cProvidedTypeProvidedTypeEnumRuleCall_0_1_1_0_0 = (RuleCall)cProvidedTypeAssignment_0_1_1_0.eContents().get(0);
		private final Assignment cProvidedJVMTypeAssignment_0_1_1_1 = (Assignment)cAlternatives_0_1_1.eContents().get(1);
		private final RuleCall cProvidedJVMTypeJvmTypeReferenceParserRuleCall_0_1_1_1_0 = (RuleCall)cProvidedJVMTypeAssignment_0_1_1_1.eContents().get(0);
		private final Keyword cAsKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cVarNameAssignment_0_1_3 = (Assignment)cGroup_0_1.eContents().get(3);
		private final RuleCall cVarNameIDTerminalRuleCall_0_1_3_0 = (RuleCall)cVarNameAssignment_0_1_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DocumentInclude returns doc::LDocInclude:
		//	("include" document=[doc::LDocDocument|QualifiedName] "as" varName=ID | provided?="provided"
		//	(providedType=ProvidedType | providedJVMType=JvmTypeReference) "as" varName=ID) ";";
		public ParserRule getRule() { return rule; }

		//("include" document=[doc::LDocDocument|QualifiedName] "as" varName=ID | provided?="provided" (providedType=ProvidedType
		//| providedJVMType=JvmTypeReference) "as" varName=ID) ";"
		public Group getGroup() { return cGroup; }

		//"include" document=[doc::LDocDocument|QualifiedName] "as" varName=ID | provided?="provided" (providedType=ProvidedType |
		//providedJVMType=JvmTypeReference) "as" varName=ID
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"include" document=[doc::LDocDocument|QualifiedName] "as" varName=ID
		public Group getGroup_0_0() { return cGroup_0_0; }

		//"include"
		public Keyword getIncludeKeyword_0_0_0() { return cIncludeKeyword_0_0_0; }

		//document=[doc::LDocDocument|QualifiedName]
		public Assignment getDocumentAssignment_0_0_1() { return cDocumentAssignment_0_0_1; }

		//[doc::LDocDocument|QualifiedName]
		public CrossReference getDocumentLDocDocumentCrossReference_0_0_1_0() { return cDocumentLDocDocumentCrossReference_0_0_1_0; }

		//QualifiedName
		public RuleCall getDocumentLDocDocumentQualifiedNameParserRuleCall_0_0_1_0_1() { return cDocumentLDocDocumentQualifiedNameParserRuleCall_0_0_1_0_1; }

		//"as"
		public Keyword getAsKeyword_0_0_2() { return cAsKeyword_0_0_2; }

		//varName=ID
		public Assignment getVarNameAssignment_0_0_3() { return cVarNameAssignment_0_0_3; }

		//ID
		public RuleCall getVarNameIDTerminalRuleCall_0_0_3_0() { return cVarNameIDTerminalRuleCall_0_0_3_0; }

		//provided?="provided" (providedType=ProvidedType | providedJVMType=JvmTypeReference) "as" varName=ID
		public Group getGroup_0_1() { return cGroup_0_1; }

		//provided?="provided"
		public Assignment getProvidedAssignment_0_1_0() { return cProvidedAssignment_0_1_0; }

		//"provided"
		public Keyword getProvidedProvidedKeyword_0_1_0_0() { return cProvidedProvidedKeyword_0_1_0_0; }

		//providedType=ProvidedType | providedJVMType=JvmTypeReference
		public Alternatives getAlternatives_0_1_1() { return cAlternatives_0_1_1; }

		//providedType=ProvidedType
		public Assignment getProvidedTypeAssignment_0_1_1_0() { return cProvidedTypeAssignment_0_1_1_0; }

		//ProvidedType
		public RuleCall getProvidedTypeProvidedTypeEnumRuleCall_0_1_1_0_0() { return cProvidedTypeProvidedTypeEnumRuleCall_0_1_1_0_0; }

		//providedJVMType=JvmTypeReference
		public Assignment getProvidedJVMTypeAssignment_0_1_1_1() { return cProvidedJVMTypeAssignment_0_1_1_1; }

		//JvmTypeReference
		public RuleCall getProvidedJVMTypeJvmTypeReferenceParserRuleCall_0_1_1_1_0() { return cProvidedJVMTypeJvmTypeReferenceParserRuleCall_0_1_1_1_0; }

		//"as"
		public Keyword getAsKeyword_0_1_2() { return cAsKeyword_0_1_2; }

		//varName=ID
		public Assignment getVarNameAssignment_0_1_3() { return cVarNameAssignment_0_1_3; }

		//ID
		public RuleCall getVarNameIDTerminalRuleCall_0_1_3_0() { return cVarNameIDTerminalRuleCall_0_1_3_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class GeneralDocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GeneralDocument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLayouterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsXImportDeclarationParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Assignment cIncludesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIncludesDocumentIncludeParserRuleCall_4_0 = (RuleCall)cIncludesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLanguageKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cLanguageAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLanguageIDTerminalRuleCall_5_1_0 = (RuleCall)cLanguageAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cContentAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cContentRichStringParserRuleCall_6_0 = (RuleCall)cContentAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//GeneralDocument returns doc::LDocLayouter:
		//	"Layouter" name=QualifiedName "{" imports+=XImportDeclaration* includes+=DocumentInclude* ("language" language=ID ";")
		//	content=RichString "}";
		public ParserRule getRule() { return rule; }

		//"Layouter" name=QualifiedName "{" imports+=XImportDeclaration* includes+=DocumentInclude* ("language" language=ID ";")
		//content=RichString "}"
		public Group getGroup() { return cGroup; }

		//"Layouter"
		public Keyword getLayouterKeyword_0() { return cLayouterKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//imports+=XImportDeclaration*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }

		//XImportDeclaration
		public RuleCall getImportsXImportDeclarationParserRuleCall_3_0() { return cImportsXImportDeclarationParserRuleCall_3_0; }

		//includes+=DocumentInclude*
		public Assignment getIncludesAssignment_4() { return cIncludesAssignment_4; }

		//DocumentInclude
		public RuleCall getIncludesDocumentIncludeParserRuleCall_4_0() { return cIncludesDocumentIncludeParserRuleCall_4_0; }

		//"language" language=ID ";"
		public Group getGroup_5() { return cGroup_5; }

		//"language"
		public Keyword getLanguageKeyword_5_0() { return cLanguageKeyword_5_0; }

		//language=ID
		public Assignment getLanguageAssignment_5_1() { return cLanguageAssignment_5_1; }

		//ID
		public RuleCall getLanguageIDTerminalRuleCall_5_1_0() { return cLanguageIDTerminalRuleCall_5_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5_2() { return cSemicolonKeyword_5_2; }

		//content=RichString
		public Assignment getContentAssignment_6() { return cContentAssignment_6; }

		//RichString
		public RuleCall getContentRichStringParserRuleCall_6_0() { return cContentRichStringParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class EntityDocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityDocument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityDocumentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cCoversKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cModelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cModelLTypeCrossReference_3_0 = (CrossReference)cModelAssignment_3.eContents().get(0);
		private final RuleCall cModelLTypeQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cModelLTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLanguageKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cLanguageAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLanguageIDTerminalRuleCall_5_1_0 = (RuleCall)cLanguageAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cDescriptionKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cDescriptionAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cDescriptionRichStringParserRuleCall_6_2_0 = (RuleCall)cDescriptionAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cFieldsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cFieldsEntityFieldParserRuleCall_7_0 = (RuleCall)cFieldsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//EntityDocument returns doc::LDocEntityDocument:
		//	"EntityDocument" name=QualifiedName "covers" model=[types::LType|QualifiedName] "{" ("language" language=ID ";")
		//	("description" "{" description=RichString "}")? fields+=EntityField* "}";
		public ParserRule getRule() { return rule; }

		//"EntityDocument" name=QualifiedName "covers" model=[types::LType|QualifiedName] "{" ("language" language=ID ";")
		//("description" "{" description=RichString "}")? fields+=EntityField* "}"
		public Group getGroup() { return cGroup; }

		//"EntityDocument"
		public Keyword getEntityDocumentKeyword_0() { return cEntityDocumentKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"covers"
		public Keyword getCoversKeyword_2() { return cCoversKeyword_2; }

		//model=[types::LType|QualifiedName]
		public Assignment getModelAssignment_3() { return cModelAssignment_3; }

		//[types::LType|QualifiedName]
		public CrossReference getModelLTypeCrossReference_3_0() { return cModelLTypeCrossReference_3_0; }

		//QualifiedName
		public RuleCall getModelLTypeQualifiedNameParserRuleCall_3_0_1() { return cModelLTypeQualifiedNameParserRuleCall_3_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//"language" language=ID ";"
		public Group getGroup_5() { return cGroup_5; }

		//"language"
		public Keyword getLanguageKeyword_5_0() { return cLanguageKeyword_5_0; }

		//language=ID
		public Assignment getLanguageAssignment_5_1() { return cLanguageAssignment_5_1; }

		//ID
		public RuleCall getLanguageIDTerminalRuleCall_5_1_0() { return cLanguageIDTerminalRuleCall_5_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5_2() { return cSemicolonKeyword_5_2; }

		//("description" "{" description=RichString "}")?
		public Group getGroup_6() { return cGroup_6; }

		//"description"
		public Keyword getDescriptionKeyword_6_0() { return cDescriptionKeyword_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }

		//description=RichString
		public Assignment getDescriptionAssignment_6_2() { return cDescriptionAssignment_6_2; }

		//RichString
		public RuleCall getDescriptionRichStringParserRuleCall_6_2_0() { return cDescriptionRichStringParserRuleCall_6_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }

		//fields+=EntityField*
		public Assignment getFieldsAssignment_7() { return cFieldsAssignment_7; }

		//EntityField
		public RuleCall getFieldsEntityFieldParserRuleCall_7_0() { return cFieldsEntityFieldParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class EntityFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLDocEntityFieldAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFieldKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeFieldAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeFieldLFeatureCrossReference_2_0 = (CrossReference)cTypeFieldAssignment_2.eContents().get(0);
		private final RuleCall cTypeFieldLFeatureIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeFieldLFeatureCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionRichStringParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EntityField returns doc::LDocEntityField:
		//	{doc::LDocEntityField} "field" typeField=[types::LFeature] "{" description=RichString? "}";
		public ParserRule getRule() { return rule; }

		//{doc::LDocEntityField} "field" typeField=[types::LFeature] "{" description=RichString? "}"
		public Group getGroup() { return cGroup; }

		//{doc::LDocEntityField}
		public Action getLDocEntityFieldAction_0() { return cLDocEntityFieldAction_0; }

		//"field"
		public Keyword getFieldKeyword_1() { return cFieldKeyword_1; }

		//typeField=[types::LFeature]
		public Assignment getTypeFieldAssignment_2() { return cTypeFieldAssignment_2; }

		//[types::LFeature]
		public CrossReference getTypeFieldLFeatureCrossReference_2_0() { return cTypeFieldLFeatureCrossReference_2_0; }

		//ID
		public RuleCall getTypeFieldLFeatureIDTerminalRuleCall_2_0_1() { return cTypeFieldLFeatureIDTerminalRuleCall_2_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//description=RichString?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }

		//RichString
		public RuleCall getDescriptionRichStringParserRuleCall_4_0() { return cDescriptionRichStringParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class DTODocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DTODocument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDTODocumentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cCoversKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cModelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cModelLTypeCrossReference_3_0 = (CrossReference)cModelAssignment_3.eContents().get(0);
		private final RuleCall cModelLTypeQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cModelLTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLanguageKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cLanguageAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLanguageIDTerminalRuleCall_5_1_0 = (RuleCall)cLanguageAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cDescriptionKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cDescriptionAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cDescriptionRichStringParserRuleCall_6_2_0 = (RuleCall)cDescriptionAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cPropertiesKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cFieldsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cFieldsDTOPropertyParserRuleCall_7_2_0 = (RuleCall)cFieldsAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//DTODocument returns doc::LDocDtoDocument:
		//	"DTODocument" name=QualifiedName "covers" model=[types::LType|QualifiedName] "{" ("language" language=ID ";")
		//	("description" "{" description=RichString "}")? ("properties" "{" fields+=DTOProperty* "}")? "}";
		public ParserRule getRule() { return rule; }

		//"DTODocument" name=QualifiedName "covers" model=[types::LType|QualifiedName] "{" ("language" language=ID ";")
		//("description" "{" description=RichString "}")? ("properties" "{" fields+=DTOProperty* "}")? "}"
		public Group getGroup() { return cGroup; }

		//"DTODocument"
		public Keyword getDTODocumentKeyword_0() { return cDTODocumentKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"covers"
		public Keyword getCoversKeyword_2() { return cCoversKeyword_2; }

		//model=[types::LType|QualifiedName]
		public Assignment getModelAssignment_3() { return cModelAssignment_3; }

		//[types::LType|QualifiedName]
		public CrossReference getModelLTypeCrossReference_3_0() { return cModelLTypeCrossReference_3_0; }

		//QualifiedName
		public RuleCall getModelLTypeQualifiedNameParserRuleCall_3_0_1() { return cModelLTypeQualifiedNameParserRuleCall_3_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//"language" language=ID ";"
		public Group getGroup_5() { return cGroup_5; }

		//"language"
		public Keyword getLanguageKeyword_5_0() { return cLanguageKeyword_5_0; }

		//language=ID
		public Assignment getLanguageAssignment_5_1() { return cLanguageAssignment_5_1; }

		//ID
		public RuleCall getLanguageIDTerminalRuleCall_5_1_0() { return cLanguageIDTerminalRuleCall_5_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5_2() { return cSemicolonKeyword_5_2; }

		//("description" "{" description=RichString "}")?
		public Group getGroup_6() { return cGroup_6; }

		//"description"
		public Keyword getDescriptionKeyword_6_0() { return cDescriptionKeyword_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }

		//description=RichString
		public Assignment getDescriptionAssignment_6_2() { return cDescriptionAssignment_6_2; }

		//RichString
		public RuleCall getDescriptionRichStringParserRuleCall_6_2_0() { return cDescriptionRichStringParserRuleCall_6_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }

		//("properties" "{" fields+=DTOProperty* "}")?
		public Group getGroup_7() { return cGroup_7; }

		//"properties"
		public Keyword getPropertiesKeyword_7_0() { return cPropertiesKeyword_7_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }

		//fields+=DTOProperty*
		public Assignment getFieldsAssignment_7_2() { return cFieldsAssignment_7_2; }

		//DTOProperty
		public RuleCall getFieldsDTOPropertyParserRuleCall_7_2_0() { return cFieldsDTOPropertyParserRuleCall_7_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class DTOPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DTOProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDescriptionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDescriptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDescriptionRichStringParserRuleCall_5_0 = (RuleCall)cDescriptionAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DTOProperty returns doc::LDocDtoProperty:
		//	"name" name=ID ";" "description" "{" description=RichString "}";
		public ParserRule getRule() { return rule; }

		//"name" name=ID ";" "description" "{" description=RichString "}"
		public Group getGroup() { return cGroup; }

		//"name"
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }

		//"description"
		public Keyword getDescriptionKeyword_3() { return cDescriptionKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//description=RichString
		public Assignment getDescriptionAssignment_5() { return cDescriptionAssignment_5; }

		//RichString
		public RuleCall getDescriptionRichStringParserRuleCall_5_0() { return cDescriptionRichStringParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class BPMProcessDocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BPMProcessDocument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBPMProcessDocumentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cCoversKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProcessAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProcessSTRINGTerminalRuleCall_3_0 = (RuleCall)cProcessAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLanguageKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cLanguageAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLanguageIDTerminalRuleCall_5_1_0 = (RuleCall)cLanguageAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cDescriptionKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cDescriptionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDescriptionRichStringParserRuleCall_8_0 = (RuleCall)cDescriptionAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//BPMProcessDocument returns doc::LDocBPMProcessDocument:
		//	"BPMProcessDocument" name=QualifiedName "covers" process=STRING "{" ("language" language=ID ";") "description" "{"
		//	description=RichString "}" "}";
		public ParserRule getRule() { return rule; }

		//"BPMProcessDocument" name=QualifiedName "covers" process=STRING "{" ("language" language=ID ";") "description" "{"
		//description=RichString "}" "}"
		public Group getGroup() { return cGroup; }

		//"BPMProcessDocument"
		public Keyword getBPMProcessDocumentKeyword_0() { return cBPMProcessDocumentKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"covers"
		public Keyword getCoversKeyword_2() { return cCoversKeyword_2; }

		//process=STRING
		public Assignment getProcessAssignment_3() { return cProcessAssignment_3; }

		//STRING
		public RuleCall getProcessSTRINGTerminalRuleCall_3_0() { return cProcessSTRINGTerminalRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//"language" language=ID ";"
		public Group getGroup_5() { return cGroup_5; }

		//"language"
		public Keyword getLanguageKeyword_5_0() { return cLanguageKeyword_5_0; }

		//language=ID
		public Assignment getLanguageAssignment_5_1() { return cLanguageAssignment_5_1; }

		//ID
		public RuleCall getLanguageIDTerminalRuleCall_5_1_0() { return cLanguageIDTerminalRuleCall_5_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5_2() { return cSemicolonKeyword_5_2; }

		//"description"
		public Keyword getDescriptionKeyword_6() { return cDescriptionKeyword_6; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//description=RichString
		public Assignment getDescriptionAssignment_8() { return cDescriptionAssignment_8; }

		//RichString
		public RuleCall getDescriptionRichStringParserRuleCall_8_0() { return cDescriptionRichStringParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class BPMHumanTaskDocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BPMHumanTaskDocument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBPMHumanTaskDocumentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cCoversKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTaskAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTaskSTRINGTerminalRuleCall_3_0 = (RuleCall)cTaskAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLanguageKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cLanguageAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLanguageIDTerminalRuleCall_5_1_0 = (RuleCall)cLanguageAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cDescriptionKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cDescriptionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDescriptionRichStringParserRuleCall_8_0 = (RuleCall)cDescriptionAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//BPMHumanTaskDocument returns doc::LDocHumanTaskDocument:
		//	"BPMHumanTaskDocument" name=QualifiedName "covers" task=STRING "{" ("language" language=ID ";") "description" "{"
		//	description=RichString "}" "}";
		public ParserRule getRule() { return rule; }

		//"BPMHumanTaskDocument" name=QualifiedName "covers" task=STRING "{" ("language" language=ID ";") "description" "{"
		//description=RichString "}" "}"
		public Group getGroup() { return cGroup; }

		//"BPMHumanTaskDocument"
		public Keyword getBPMHumanTaskDocumentKeyword_0() { return cBPMHumanTaskDocumentKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"covers"
		public Keyword getCoversKeyword_2() { return cCoversKeyword_2; }

		//task=STRING
		public Assignment getTaskAssignment_3() { return cTaskAssignment_3; }

		//STRING
		public RuleCall getTaskSTRINGTerminalRuleCall_3_0() { return cTaskSTRINGTerminalRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//"language" language=ID ";"
		public Group getGroup_5() { return cGroup_5; }

		//"language"
		public Keyword getLanguageKeyword_5_0() { return cLanguageKeyword_5_0; }

		//language=ID
		public Assignment getLanguageAssignment_5_1() { return cLanguageAssignment_5_1; }

		//ID
		public RuleCall getLanguageIDTerminalRuleCall_5_1_0() { return cLanguageIDTerminalRuleCall_5_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5_2() { return cSemicolonKeyword_5_2; }

		//"description"
		public Keyword getDescriptionKeyword_6() { return cDescriptionKeyword_6; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//description=RichString
		public Assignment getDescriptionAssignment_8() { return cDescriptionAssignment_8; }

		//RichString
		public RuleCall getDescriptionRichStringParserRuleCall_8_0() { return cDescriptionRichStringParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class VaaclipseViewDocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VaaclipseViewDocument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVaaclipseViewDocumentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cCoversKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cViewAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cViewSTRINGTerminalRuleCall_3_0 = (RuleCall)cViewAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLanguageKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cLanguageAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLanguageIDTerminalRuleCall_5_1_0 = (RuleCall)cLanguageAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cDescriptionKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cDescriptionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDescriptionRichStringParserRuleCall_8_0 = (RuleCall)cDescriptionAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//VaaclipseViewDocument returns doc::LDocViewDocument:
		//	"VaaclipseViewDocument" name=QualifiedName "covers" view=STRING "{" ("language" language=ID ";") "description" "{"
		//	description=RichString "}" "}";
		public ParserRule getRule() { return rule; }

		//"VaaclipseViewDocument" name=QualifiedName "covers" view=STRING "{" ("language" language=ID ";") "description" "{"
		//description=RichString "}" "}"
		public Group getGroup() { return cGroup; }

		//"VaaclipseViewDocument"
		public Keyword getVaaclipseViewDocumentKeyword_0() { return cVaaclipseViewDocumentKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"covers"
		public Keyword getCoversKeyword_2() { return cCoversKeyword_2; }

		//view=STRING
		public Assignment getViewAssignment_3() { return cViewAssignment_3; }

		//STRING
		public RuleCall getViewSTRINGTerminalRuleCall_3_0() { return cViewSTRINGTerminalRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//"language" language=ID ";"
		public Group getGroup_5() { return cGroup_5; }

		//"language"
		public Keyword getLanguageKeyword_5_0() { return cLanguageKeyword_5_0; }

		//language=ID
		public Assignment getLanguageAssignment_5_1() { return cLanguageAssignment_5_1; }

		//ID
		public RuleCall getLanguageIDTerminalRuleCall_5_1_0() { return cLanguageIDTerminalRuleCall_5_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5_2() { return cSemicolonKeyword_5_2; }

		//"description"
		public Keyword getDescriptionKeyword_6() { return cDescriptionKeyword_6; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//description=RichString
		public Assignment getDescriptionAssignment_8() { return cDescriptionAssignment_8; }

		//RichString
		public RuleCall getDescriptionRichStringParserRuleCall_8_0() { return cDescriptionRichStringParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class UIDocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UIDocument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUIDocumentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cCoversKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUiAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUiSTRINGTerminalRuleCall_3_0 = (RuleCall)cUiAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLanguageKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cLanguageAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLanguageIDTerminalRuleCall_5_1_0 = (RuleCall)cLanguageAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cDescriptionKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cDescriptionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDescriptionRichStringParserRuleCall_8_0 = (RuleCall)cDescriptionAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//UIDocument returns doc::LDocUIDocument:
		//	"UIDocument" name=QualifiedName "covers" ui=STRING "{" ("language" language=ID ";") "description" "{"
		//	description=RichString "}" "}";
		public ParserRule getRule() { return rule; }

		//"UIDocument" name=QualifiedName "covers" ui=STRING "{" ("language" language=ID ";") "description" "{"
		//description=RichString "}" "}"
		public Group getGroup() { return cGroup; }

		//"UIDocument"
		public Keyword getUIDocumentKeyword_0() { return cUIDocumentKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"covers"
		public Keyword getCoversKeyword_2() { return cCoversKeyword_2; }

		//ui=STRING
		public Assignment getUiAssignment_3() { return cUiAssignment_3; }

		//STRING
		public RuleCall getUiSTRINGTerminalRuleCall_3_0() { return cUiSTRINGTerminalRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//"language" language=ID ";"
		public Group getGroup_5() { return cGroup_5; }

		//"language"
		public Keyword getLanguageKeyword_5_0() { return cLanguageKeyword_5_0; }

		//language=ID
		public Assignment getLanguageAssignment_5_1() { return cLanguageAssignment_5_1; }

		//ID
		public RuleCall getLanguageIDTerminalRuleCall_5_1_0() { return cLanguageIDTerminalRuleCall_5_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5_2() { return cSemicolonKeyword_5_2; }

		//"description"
		public Keyword getDescriptionKeyword_6() { return cDescriptionKeyword_6; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//description=RichString
		public Assignment getDescriptionAssignment_8() { return cDescriptionAssignment_8; }

		//RichString
		public RuleCall getDescriptionRichStringParserRuleCall_8_0() { return cDescriptionRichStringParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class RichStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cExpressionsRichStringLiteralParserRuleCall_1_0_0 = (RuleCall)cExpressionsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cExpressionsRichStringLiteralStartParserRuleCall_1_1_0_0 = (RuleCall)cExpressionsAssignment_1_1_0.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExpressionsRichStringPartParserRuleCall_1_1_1_0 = (RuleCall)cExpressionsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Assignment cExpressionsAssignment_1_1_2_0 = (Assignment)cGroup_1_1_2.eContents().get(0);
		private final RuleCall cExpressionsRichStringLiteralInbetweenParserRuleCall_1_1_2_0_0 = (RuleCall)cExpressionsAssignment_1_1_2_0.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cExpressionsRichStringPartParserRuleCall_1_1_2_1_0 = (RuleCall)cExpressionsAssignment_1_1_2_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final RuleCall cExpressionsRichStringLiteralEndParserRuleCall_1_1_3_0 = (RuleCall)cExpressionsAssignment_1_1_3.eContents().get(0);
		
		//// RichString
		//RichString returns richstring::RichString:
		//	{richstring::RichString} (expressions+=RichStringLiteral | expressions+=RichStringLiteralStart
		//	expressions+=RichStringPart? (expressions+=RichStringLiteralInbetween expressions+=RichStringPart?)*
		//	expressions+=RichStringLiteralEnd);
		public ParserRule getRule() { return rule; }

		//{richstring::RichString} (expressions+=RichStringLiteral | expressions+=RichStringLiteralStart
		//expressions+=RichStringPart? (expressions+=RichStringLiteralInbetween expressions+=RichStringPart?)*
		//expressions+=RichStringLiteralEnd)
		public Group getGroup() { return cGroup; }

		//{richstring::RichString}
		public Action getRichStringAction_0() { return cRichStringAction_0; }

		//expressions+=RichStringLiteral | expressions+=RichStringLiteralStart expressions+=RichStringPart?
		//(expressions+=RichStringLiteralInbetween expressions+=RichStringPart?)* expressions+=RichStringLiteralEnd
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//expressions+=RichStringLiteral
		public Assignment getExpressionsAssignment_1_0() { return cExpressionsAssignment_1_0; }

		//RichStringLiteral
		public RuleCall getExpressionsRichStringLiteralParserRuleCall_1_0_0() { return cExpressionsRichStringLiteralParserRuleCall_1_0_0; }

		//expressions+=RichStringLiteralStart expressions+=RichStringPart? (expressions+=RichStringLiteralInbetween
		//expressions+=RichStringPart?)* expressions+=RichStringLiteralEnd
		public Group getGroup_1_1() { return cGroup_1_1; }

		//expressions+=RichStringLiteralStart
		public Assignment getExpressionsAssignment_1_1_0() { return cExpressionsAssignment_1_1_0; }

		//RichStringLiteralStart
		public RuleCall getExpressionsRichStringLiteralStartParserRuleCall_1_1_0_0() { return cExpressionsRichStringLiteralStartParserRuleCall_1_1_0_0; }

		//expressions+=RichStringPart?
		public Assignment getExpressionsAssignment_1_1_1() { return cExpressionsAssignment_1_1_1; }

		//RichStringPart
		public RuleCall getExpressionsRichStringPartParserRuleCall_1_1_1_0() { return cExpressionsRichStringPartParserRuleCall_1_1_1_0; }

		//(expressions+=RichStringLiteralInbetween expressions+=RichStringPart?)*
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//expressions+=RichStringLiteralInbetween
		public Assignment getExpressionsAssignment_1_1_2_0() { return cExpressionsAssignment_1_1_2_0; }

		//RichStringLiteralInbetween
		public RuleCall getExpressionsRichStringLiteralInbetweenParserRuleCall_1_1_2_0_0() { return cExpressionsRichStringLiteralInbetweenParserRuleCall_1_1_2_0_0; }

		//expressions+=RichStringPart?
		public Assignment getExpressionsAssignment_1_1_2_1() { return cExpressionsAssignment_1_1_2_1; }

		//RichStringPart
		public RuleCall getExpressionsRichStringPartParserRuleCall_1_1_2_1_0() { return cExpressionsRichStringPartParserRuleCall_1_1_2_1_0; }

		//expressions+=RichStringLiteralEnd
		public Assignment getExpressionsAssignment_1_1_3() { return cExpressionsAssignment_1_1_3; }

		//RichStringLiteralEnd
		public RuleCall getExpressionsRichStringLiteralEndParserRuleCall_1_1_3_0() { return cExpressionsRichStringLiteralEndParserRuleCall_1_1_3_0; }
	}

	public class RichStringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueRICH_TEXTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//RichStringLiteral returns xbase::XExpression:
		//	{richstring::RichStringLiteral} value=RICH_TEXT;
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringLiteral} value=RICH_TEXT
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringLiteral}
		public Action getRichStringLiteralAction_0() { return cRichStringLiteralAction_0; }

		//value=RICH_TEXT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//RICH_TEXT
		public RuleCall getValueRICH_TEXTTerminalRuleCall_1_0() { return cValueRICH_TEXTTerminalRuleCall_1_0; }
	}

	public class RichStringLiteralStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringLiteralStart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueRICH_TEXT_STARTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//RichStringLiteralStart returns xbase::XExpression:
		//	{richstring::RichStringLiteral} value=RICH_TEXT_START;
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringLiteral} value=RICH_TEXT_START
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringLiteral}
		public Action getRichStringLiteralAction_0() { return cRichStringLiteralAction_0; }

		//value=RICH_TEXT_START
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//RICH_TEXT_START
		public RuleCall getValueRICH_TEXT_STARTTerminalRuleCall_1_0() { return cValueRICH_TEXT_STARTTerminalRuleCall_1_0; }
	}

	public class RichStringLiteralInbetweenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringLiteralInbetween");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValueRICH_TEXT_INBETWEENTerminalRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cValueCOMMENT_RICH_TEXT_INBETWEENTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//RichStringLiteralInbetween returns xbase::XExpression:
		//	{richstring::RichStringLiteral} (value=RICH_TEXT_INBETWEEN | value=COMMENT_RICH_TEXT_INBETWEEN);
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringLiteral} (value=RICH_TEXT_INBETWEEN | value=COMMENT_RICH_TEXT_INBETWEEN)
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringLiteral}
		public Action getRichStringLiteralAction_0() { return cRichStringLiteralAction_0; }

		//value=RICH_TEXT_INBETWEEN | value=COMMENT_RICH_TEXT_INBETWEEN
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//value=RICH_TEXT_INBETWEEN
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }

		//RICH_TEXT_INBETWEEN
		public RuleCall getValueRICH_TEXT_INBETWEENTerminalRuleCall_1_0_0() { return cValueRICH_TEXT_INBETWEENTerminalRuleCall_1_0_0; }

		//value=COMMENT_RICH_TEXT_INBETWEEN
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//COMMENT_RICH_TEXT_INBETWEEN
		public RuleCall getValueCOMMENT_RICH_TEXT_INBETWEENTerminalRuleCall_1_1_0() { return cValueCOMMENT_RICH_TEXT_INBETWEENTerminalRuleCall_1_1_0; }
	}

	public class RichStringLiteralEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringLiteralEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValueRICH_TEXT_ENDTerminalRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cValueCOMMENT_RICH_TEXT_ENDTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//RichStringLiteralEnd returns xbase::XExpression:
		//	{richstring::RichStringLiteral} (value=RICH_TEXT_END | value=COMMENT_RICH_TEXT_END);
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringLiteral} (value=RICH_TEXT_END | value=COMMENT_RICH_TEXT_END)
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringLiteral}
		public Action getRichStringLiteralAction_0() { return cRichStringLiteralAction_0; }

		//value=RICH_TEXT_END | value=COMMENT_RICH_TEXT_END
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//value=RICH_TEXT_END
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }

		//RICH_TEXT_END
		public RuleCall getValueRICH_TEXT_ENDTerminalRuleCall_1_0_0() { return cValueRICH_TEXT_ENDTerminalRuleCall_1_0_0; }

		//value=COMMENT_RICH_TEXT_END
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//COMMENT_RICH_TEXT_END
		public RuleCall getValueCOMMENT_RICH_TEXT_ENDTerminalRuleCall_1_1_0() { return cValueCOMMENT_RICH_TEXT_ENDTerminalRuleCall_1_1_0; }
	}

	public class InternalRichStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InternalRichString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionsRichStringLiteralInbetweenParserRuleCall_1_0_0 = (RuleCall)cExpressionsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cExpressionsRichStringPartParserRuleCall_1_1_0_0 = (RuleCall)cExpressionsAssignment_1_1_0.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExpressionsRichStringLiteralInbetweenParserRuleCall_1_1_1_0 = (RuleCall)cExpressionsAssignment_1_1_1.eContents().get(0);
		
		//InternalRichString returns xbase::XExpression:
		//	{richstring::RichString} (expressions+=RichStringLiteralInbetween (expressions+=RichStringPart?
		//	expressions+=RichStringLiteralInbetween)*);
		public ParserRule getRule() { return rule; }

		//{richstring::RichString} (expressions+=RichStringLiteralInbetween (expressions+=RichStringPart?
		//expressions+=RichStringLiteralInbetween)*)
		public Group getGroup() { return cGroup; }

		//{richstring::RichString}
		public Action getRichStringAction_0() { return cRichStringAction_0; }

		//expressions+=RichStringLiteralInbetween (expressions+=RichStringPart? expressions+=RichStringLiteralInbetween)*
		public Group getGroup_1() { return cGroup_1; }

		//expressions+=RichStringLiteralInbetween
		public Assignment getExpressionsAssignment_1_0() { return cExpressionsAssignment_1_0; }

		//RichStringLiteralInbetween
		public RuleCall getExpressionsRichStringLiteralInbetweenParserRuleCall_1_0_0() { return cExpressionsRichStringLiteralInbetweenParserRuleCall_1_0_0; }

		//(expressions+=RichStringPart? expressions+=RichStringLiteralInbetween)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//expressions+=RichStringPart?
		public Assignment getExpressionsAssignment_1_1_0() { return cExpressionsAssignment_1_1_0; }

		//RichStringPart
		public RuleCall getExpressionsRichStringPartParserRuleCall_1_1_0_0() { return cExpressionsRichStringPartParserRuleCall_1_1_0_0; }

		//expressions+=RichStringLiteralInbetween
		public Assignment getExpressionsAssignment_1_1_1() { return cExpressionsAssignment_1_1_1; }

		//RichStringLiteralInbetween
		public RuleCall getExpressionsRichStringLiteralInbetweenParserRuleCall_1_1_1_0() { return cExpressionsRichStringLiteralInbetweenParserRuleCall_1_1_1_0; }
	}

	public class RichStringPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXExpressionOrVarDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRichStringForLoopParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRichStringIfParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRichStringH1ParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRichStringH2ParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRichStringH3ParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRichStringH4ParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cRichStringH5ParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cRichStringH6ParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cRichStringChapterParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cRichStringSectionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cRichStringSubsectionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cRichStringExampleParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cRichStringURLParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cRichStringRefParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cRichStringMailtoParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cRichStringSkypeParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cRichStringMovieParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cRichStringImgParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cRichStringBoldParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cRichStringUnderlineParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cRichStringItalicParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cRichStringSpanParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cRichStringCodeParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cRichStringTableParserRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		private final RuleCall cRichStringTableRowParserRuleCall_25 = (RuleCall)cAlternatives.eContents().get(25);
		private final RuleCall cRichStringTableCellParserRuleCall_26 = (RuleCall)cAlternatives.eContents().get(26);
		private final RuleCall cRichStringListParserRuleCall_27 = (RuleCall)cAlternatives.eContents().get(27);
		private final RuleCall cRichStringOrderedListParserRuleCall_28 = (RuleCall)cAlternatives.eContents().get(28);
		private final RuleCall cRichStringListElementParserRuleCall_29 = (RuleCall)cAlternatives.eContents().get(29);
		private final RuleCall cRichStringOpenViewParserRuleCall_30 = (RuleCall)cAlternatives.eContents().get(30);
		private final RuleCall cRichStringStartProcessParserRuleCall_31 = (RuleCall)cAlternatives.eContents().get(31);
		private final RuleCall cRichStringEntityRefParserRuleCall_32 = (RuleCall)cAlternatives.eContents().get(32);
		private final RuleCall cRichStringDTORefParserRuleCall_33 = (RuleCall)cAlternatives.eContents().get(33);
		private final RuleCall cRichStringProcessRefParserRuleCall_34 = (RuleCall)cAlternatives.eContents().get(34);
		private final RuleCall cRichStringTaskRefParserRuleCall_35 = (RuleCall)cAlternatives.eContents().get(35);
		private final RuleCall cRichStringViewRefParserRuleCall_36 = (RuleCall)cAlternatives.eContents().get(36);
		private final RuleCall cRichStringUIRefParserRuleCall_37 = (RuleCall)cAlternatives.eContents().get(37);
		private final RuleCall cRichStringInfoBoxParserRuleCall_38 = (RuleCall)cAlternatives.eContents().get(38);
		private final RuleCall cRichStringErrorBoxParserRuleCall_39 = (RuleCall)cAlternatives.eContents().get(39);
		private final RuleCall cRichStringWarningBoxParserRuleCall_40 = (RuleCall)cAlternatives.eContents().get(40);
		private final RuleCall cRichStringAbstractsBoxParserRuleCall_41 = (RuleCall)cAlternatives.eContents().get(41);
		private final RuleCall cRichStringChecklistBoxParserRuleCall_42 = (RuleCall)cAlternatives.eContents().get(42);
		private final RuleCall cRichStringBioBoxParserRuleCall_43 = (RuleCall)cAlternatives.eContents().get(43);
		private final RuleCall cRichStringSideNoteBoxParserRuleCall_44 = (RuleCall)cAlternatives.eContents().get(44);
		private final RuleCall cRichStringContainerParserRuleCall_45 = (RuleCall)cAlternatives.eContents().get(45);
		private final RuleCall cRichStringFooterParserRuleCall_46 = (RuleCall)cAlternatives.eContents().get(46);
		private final RuleCall cRichStringHeaderParserRuleCall_47 = (RuleCall)cAlternatives.eContents().get(47);
		private final RuleCall cRichStringIndexParserRuleCall_48 = (RuleCall)cAlternatives.eContents().get(48);
		private final RuleCall cRichStringIndexElementParserRuleCall_49 = (RuleCall)cAlternatives.eContents().get(49);
		
		//RichStringPart returns xbase::XExpression:
		//	XExpressionOrVarDeclaration | RichStringForLoop | RichStringIf | RichStringH1 | RichStringH2 | RichStringH3 |
		//	RichStringH4 | RichStringH5 | RichStringH6 | RichStringChapter | RichStringSection | RichStringSubsection |
		//	RichStringExample | RichStringURL | RichStringRef | RichStringMailto | RichStringSkype | RichStringMovie |
		//	RichStringImg | RichStringBold | RichStringUnderline | RichStringItalic | RichStringSpan | RichStringCode |
		//	RichStringTable | RichStringTableRow | RichStringTableCell | RichStringList | RichStringOrderedList |
		//	RichStringListElement | RichStringOpenView | RichStringStartProcess | RichStringEntityRef | RichStringDTORef |
		//	RichStringProcessRef | RichStringTaskRef | RichStringViewRef | RichStringUIRef | RichStringInfoBox |
		//	RichStringErrorBox | RichStringWarningBox | RichStringAbstractsBox | RichStringChecklistBox | RichStringBioBox |
		//	RichStringSideNoteBox | RichStringContainer | RichStringFooter | RichStringHeader | RichStringIndex |
		//	RichStringIndexElement;
		public ParserRule getRule() { return rule; }

		//XExpressionOrVarDeclaration | RichStringForLoop | RichStringIf | RichStringH1 | RichStringH2 | RichStringH3 |
		//RichStringH4 | RichStringH5 | RichStringH6 | RichStringChapter | RichStringSection | RichStringSubsection |
		//RichStringExample | RichStringURL | RichStringRef | RichStringMailto | RichStringSkype | RichStringMovie |
		//RichStringImg | RichStringBold | RichStringUnderline | RichStringItalic | RichStringSpan | RichStringCode |
		//RichStringTable | RichStringTableRow | RichStringTableCell | RichStringList | RichStringOrderedList |
		//RichStringListElement | RichStringOpenView | RichStringStartProcess | RichStringEntityRef | RichStringDTORef |
		//RichStringProcessRef | RichStringTaskRef | RichStringViewRef | RichStringUIRef | RichStringInfoBox | RichStringErrorBox
		//| RichStringWarningBox | RichStringAbstractsBox | RichStringChecklistBox | RichStringBioBox | RichStringSideNoteBox |
		//RichStringContainer | RichStringFooter | RichStringHeader | RichStringIndex | RichStringIndexElement
		public Alternatives getAlternatives() { return cAlternatives; }

		//XExpressionOrVarDeclaration
		public RuleCall getXExpressionOrVarDeclarationParserRuleCall_0() { return cXExpressionOrVarDeclarationParserRuleCall_0; }

		//RichStringForLoop
		public RuleCall getRichStringForLoopParserRuleCall_1() { return cRichStringForLoopParserRuleCall_1; }

		//RichStringIf
		public RuleCall getRichStringIfParserRuleCall_2() { return cRichStringIfParserRuleCall_2; }

		//RichStringH1
		public RuleCall getRichStringH1ParserRuleCall_3() { return cRichStringH1ParserRuleCall_3; }

		//RichStringH2
		public RuleCall getRichStringH2ParserRuleCall_4() { return cRichStringH2ParserRuleCall_4; }

		//RichStringH3
		public RuleCall getRichStringH3ParserRuleCall_5() { return cRichStringH3ParserRuleCall_5; }

		//RichStringH4
		public RuleCall getRichStringH4ParserRuleCall_6() { return cRichStringH4ParserRuleCall_6; }

		//RichStringH5
		public RuleCall getRichStringH5ParserRuleCall_7() { return cRichStringH5ParserRuleCall_7; }

		//RichStringH6
		public RuleCall getRichStringH6ParserRuleCall_8() { return cRichStringH6ParserRuleCall_8; }

		//RichStringChapter
		public RuleCall getRichStringChapterParserRuleCall_9() { return cRichStringChapterParserRuleCall_9; }

		//RichStringSection
		public RuleCall getRichStringSectionParserRuleCall_10() { return cRichStringSectionParserRuleCall_10; }

		//RichStringSubsection
		public RuleCall getRichStringSubsectionParserRuleCall_11() { return cRichStringSubsectionParserRuleCall_11; }

		//RichStringExample
		public RuleCall getRichStringExampleParserRuleCall_12() { return cRichStringExampleParserRuleCall_12; }

		//RichStringURL
		public RuleCall getRichStringURLParserRuleCall_13() { return cRichStringURLParserRuleCall_13; }

		//RichStringRef
		public RuleCall getRichStringRefParserRuleCall_14() { return cRichStringRefParserRuleCall_14; }

		//RichStringMailto
		public RuleCall getRichStringMailtoParserRuleCall_15() { return cRichStringMailtoParserRuleCall_15; }

		//RichStringSkype
		public RuleCall getRichStringSkypeParserRuleCall_16() { return cRichStringSkypeParserRuleCall_16; }

		//RichStringMovie
		public RuleCall getRichStringMovieParserRuleCall_17() { return cRichStringMovieParserRuleCall_17; }

		//RichStringImg
		public RuleCall getRichStringImgParserRuleCall_18() { return cRichStringImgParserRuleCall_18; }

		//RichStringBold
		public RuleCall getRichStringBoldParserRuleCall_19() { return cRichStringBoldParserRuleCall_19; }

		//RichStringUnderline
		public RuleCall getRichStringUnderlineParserRuleCall_20() { return cRichStringUnderlineParserRuleCall_20; }

		//RichStringItalic
		public RuleCall getRichStringItalicParserRuleCall_21() { return cRichStringItalicParserRuleCall_21; }

		//RichStringSpan
		public RuleCall getRichStringSpanParserRuleCall_22() { return cRichStringSpanParserRuleCall_22; }

		//RichStringCode
		public RuleCall getRichStringCodeParserRuleCall_23() { return cRichStringCodeParserRuleCall_23; }

		//RichStringTable
		public RuleCall getRichStringTableParserRuleCall_24() { return cRichStringTableParserRuleCall_24; }

		//RichStringTableRow
		public RuleCall getRichStringTableRowParserRuleCall_25() { return cRichStringTableRowParserRuleCall_25; }

		//RichStringTableCell
		public RuleCall getRichStringTableCellParserRuleCall_26() { return cRichStringTableCellParserRuleCall_26; }

		//RichStringList
		public RuleCall getRichStringListParserRuleCall_27() { return cRichStringListParserRuleCall_27; }

		//RichStringOrderedList
		public RuleCall getRichStringOrderedListParserRuleCall_28() { return cRichStringOrderedListParserRuleCall_28; }

		//RichStringListElement
		public RuleCall getRichStringListElementParserRuleCall_29() { return cRichStringListElementParserRuleCall_29; }

		//RichStringOpenView
		public RuleCall getRichStringOpenViewParserRuleCall_30() { return cRichStringOpenViewParserRuleCall_30; }

		//RichStringStartProcess
		public RuleCall getRichStringStartProcessParserRuleCall_31() { return cRichStringStartProcessParserRuleCall_31; }

		//RichStringEntityRef
		public RuleCall getRichStringEntityRefParserRuleCall_32() { return cRichStringEntityRefParserRuleCall_32; }

		//RichStringDTORef
		public RuleCall getRichStringDTORefParserRuleCall_33() { return cRichStringDTORefParserRuleCall_33; }

		//RichStringProcessRef
		public RuleCall getRichStringProcessRefParserRuleCall_34() { return cRichStringProcessRefParserRuleCall_34; }

		//RichStringTaskRef
		public RuleCall getRichStringTaskRefParserRuleCall_35() { return cRichStringTaskRefParserRuleCall_35; }

		//RichStringViewRef
		public RuleCall getRichStringViewRefParserRuleCall_36() { return cRichStringViewRefParserRuleCall_36; }

		//RichStringUIRef
		public RuleCall getRichStringUIRefParserRuleCall_37() { return cRichStringUIRefParserRuleCall_37; }

		//RichStringInfoBox
		public RuleCall getRichStringInfoBoxParserRuleCall_38() { return cRichStringInfoBoxParserRuleCall_38; }

		//RichStringErrorBox
		public RuleCall getRichStringErrorBoxParserRuleCall_39() { return cRichStringErrorBoxParserRuleCall_39; }

		//RichStringWarningBox
		public RuleCall getRichStringWarningBoxParserRuleCall_40() { return cRichStringWarningBoxParserRuleCall_40; }

		//RichStringAbstractsBox
		public RuleCall getRichStringAbstractsBoxParserRuleCall_41() { return cRichStringAbstractsBoxParserRuleCall_41; }

		//RichStringChecklistBox
		public RuleCall getRichStringChecklistBoxParserRuleCall_42() { return cRichStringChecklistBoxParserRuleCall_42; }

		//RichStringBioBox
		public RuleCall getRichStringBioBoxParserRuleCall_43() { return cRichStringBioBoxParserRuleCall_43; }

		//RichStringSideNoteBox
		public RuleCall getRichStringSideNoteBoxParserRuleCall_44() { return cRichStringSideNoteBoxParserRuleCall_44; }

		//RichStringContainer
		public RuleCall getRichStringContainerParserRuleCall_45() { return cRichStringContainerParserRuleCall_45; }

		//RichStringFooter
		public RuleCall getRichStringFooterParserRuleCall_46() { return cRichStringFooterParserRuleCall_46; }

		//RichStringHeader
		public RuleCall getRichStringHeaderParserRuleCall_47() { return cRichStringHeaderParserRuleCall_47; }

		//RichStringIndex
		public RuleCall getRichStringIndexParserRuleCall_48() { return cRichStringIndexParserRuleCall_48; }

		//RichStringIndexElement
		public RuleCall getRichStringIndexElementParserRuleCall_49() { return cRichStringIndexElementParserRuleCall_49; }
	}

	public class RichStringExampleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringExample");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringExampleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExampleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cExampleKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RichStringExample returns xbase::XExpression:
		//	{richstring::RichStringExample} "example" expression=InternalRichString "/example";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringExample} "example" expression=InternalRichString "/example"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringExample}
		public Action getRichStringExampleAction_0() { return cRichStringExampleAction_0; }

		//"example"
		public Keyword getExampleKeyword_1() { return cExampleKeyword_1; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_2_0() { return cExpressionInternalRichStringParserRuleCall_2_0; }

		//"/example"
		public Keyword getExampleKeyword_3() { return cExampleKeyword_3; }
	}

	public class RichStringH1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringH1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringH1Action_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cH1Keyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cH1Keyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RichStringH1 returns xbase::XExpression:
		//	{richstring::RichStringH1} "h1" expression=InternalRichString "/h1";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringH1} "h1" expression=InternalRichString "/h1"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringH1}
		public Action getRichStringH1Action_0() { return cRichStringH1Action_0; }

		//"h1"
		public Keyword getH1Keyword_1() { return cH1Keyword_1; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_2_0() { return cExpressionInternalRichStringParserRuleCall_2_0; }

		//"/h1"
		public Keyword getH1Keyword_3() { return cH1Keyword_3; }
	}

	public class RichStringH2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringH2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringH2Action_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cH2Keyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cH2Keyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RichStringH2 returns xbase::XExpression:
		//	{richstring::RichStringH2} "h2" expression=InternalRichString "/h2";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringH2} "h2" expression=InternalRichString "/h2"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringH2}
		public Action getRichStringH2Action_0() { return cRichStringH2Action_0; }

		//"h2"
		public Keyword getH2Keyword_1() { return cH2Keyword_1; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_2_0() { return cExpressionInternalRichStringParserRuleCall_2_0; }

		//"/h2"
		public Keyword getH2Keyword_3() { return cH2Keyword_3; }
	}

	public class RichStringH3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringH3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringH3Action_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cH3Keyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cH3Keyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RichStringH3 returns xbase::XExpression:
		//	{richstring::RichStringH3} "h3" expression=InternalRichString "/h3";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringH3} "h3" expression=InternalRichString "/h3"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringH3}
		public Action getRichStringH3Action_0() { return cRichStringH3Action_0; }

		//"h3"
		public Keyword getH3Keyword_1() { return cH3Keyword_1; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_2_0() { return cExpressionInternalRichStringParserRuleCall_2_0; }

		//"/h3"
		public Keyword getH3Keyword_3() { return cH3Keyword_3; }
	}

	public class RichStringH4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringH4");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringH4Action_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cH4Keyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cH4Keyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RichStringH4 returns xbase::XExpression:
		//	{richstring::RichStringH4} "h4" expression=InternalRichString "/h4";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringH4} "h4" expression=InternalRichString "/h4"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringH4}
		public Action getRichStringH4Action_0() { return cRichStringH4Action_0; }

		//"h4"
		public Keyword getH4Keyword_1() { return cH4Keyword_1; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_2_0() { return cExpressionInternalRichStringParserRuleCall_2_0; }

		//"/h4"
		public Keyword getH4Keyword_3() { return cH4Keyword_3; }
	}

	public class RichStringH5Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringH5");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringH5Action_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cH5Keyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cH5Keyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RichStringH5 returns xbase::XExpression:
		//	{richstring::RichStringH5} "h5" expression=InternalRichString "/h5";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringH5} "h5" expression=InternalRichString "/h5"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringH5}
		public Action getRichStringH5Action_0() { return cRichStringH5Action_0; }

		//"h5"
		public Keyword getH5Keyword_1() { return cH5Keyword_1; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_2_0() { return cExpressionInternalRichStringParserRuleCall_2_0; }

		//"/h5"
		public Keyword getH5Keyword_3() { return cH5Keyword_3; }
	}

	public class RichStringH6Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringH6");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringH6Action_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cH6Keyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cH6Keyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RichStringH6 returns xbase::XExpression:
		//	{richstring::RichStringH6} "h6" expression=InternalRichString "/h6";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringH6} "h6" expression=InternalRichString "/h6"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringH6}
		public Action getRichStringH6Action_0() { return cRichStringH6Action_0; }

		//"h6"
		public Keyword getH6Keyword_1() { return cH6Keyword_1; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_2_0() { return cExpressionInternalRichStringParserRuleCall_2_0; }

		//"/h6"
		public Keyword getH6Keyword_3() { return cH6Keyword_3; }
	}

	public class RichStringChapterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringChapter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringChapterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cChapterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cChapterKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RichStringChapter returns xbase::XExpression:
		//	{richstring::RichStringChapter} "chapter" name=ValidID expression=InternalRichString "/chapter";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringChapter} "chapter" name=ValidID expression=InternalRichString "/chapter"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringChapter}
		public Action getRichStringChapterAction_0() { return cRichStringChapterAction_0; }

		//"chapter"
		public Keyword getChapterKeyword_1() { return cChapterKeyword_1; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_3_0() { return cExpressionInternalRichStringParserRuleCall_3_0; }

		//"/chapter"
		public Keyword getChapterKeyword_4() { return cChapterKeyword_4; }
	}

	public class RichStringSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringSectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSectionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cSectionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RichStringSection returns xbase::XExpression:
		//	{richstring::RichStringSection} "section" name=ValidID expression=InternalRichString "/section";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringSection} "section" name=ValidID expression=InternalRichString "/section"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringSection}
		public Action getRichStringSectionAction_0() { return cRichStringSectionAction_0; }

		//"section"
		public Keyword getSectionKeyword_1() { return cSectionKeyword_1; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_3_0() { return cExpressionInternalRichStringParserRuleCall_3_0; }

		//"/section"
		public Keyword getSectionKeyword_4() { return cSectionKeyword_4; }
	}

	public class RichStringSubsectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringSubsection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringSubsectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSubsectionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cSubsectionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RichStringSubsection returns xbase::XExpression:
		//	{richstring::RichStringSubsection} "subsection" name=ValidID expression=InternalRichString "/subsection";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringSubsection} "subsection" name=ValidID expression=InternalRichString "/subsection"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringSubsection}
		public Action getRichStringSubsectionAction_0() { return cRichStringSubsectionAction_0; }

		//"subsection"
		public Keyword getSubsectionKeyword_1() { return cSubsectionKeyword_1; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_3_0() { return cExpressionInternalRichStringParserRuleCall_3_0; }

		//"/subsection"
		public Keyword getSubsectionKeyword_4() { return cSubsectionKeyword_4; }
	}

	public class RichStringURLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringURL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringURLAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUrlKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLocationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLocationSTRINGTerminalRuleCall_2_0 = (RuleCall)cLocationAssignment_2.eContents().get(0);
		private final Assignment cTextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTextInternalRichStringParserRuleCall_3_0 = (RuleCall)cTextAssignment_3.eContents().get(0);
		private final Keyword cUrlKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RichStringURL returns xbase::XExpression:
		//	{richstring::RichStringURL} "url" location=STRING text=InternalRichString "/url";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringURL} "url" location=STRING text=InternalRichString "/url"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringURL}
		public Action getRichStringURLAction_0() { return cRichStringURLAction_0; }

		//"url"
		public Keyword getUrlKeyword_1() { return cUrlKeyword_1; }

		//location=STRING
		public Assignment getLocationAssignment_2() { return cLocationAssignment_2; }

		//STRING
		public RuleCall getLocationSTRINGTerminalRuleCall_2_0() { return cLocationSTRINGTerminalRuleCall_2_0; }

		//text=InternalRichString
		public Assignment getTextAssignment_3() { return cTextAssignment_3; }

		//InternalRichString
		public RuleCall getTextInternalRichStringParserRuleCall_3_0() { return cTextInternalRichStringParserRuleCall_3_0; }

		//"/url"
		public Keyword getUrlKeyword_4() { return cUrlKeyword_4; }
	}

	public class RichStringRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRefIdSTRINGTerminalRuleCall_2_0 = (RuleCall)cRefIdAssignment_2.eContents().get(0);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cRefKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RichStringRef returns xbase::XExpression:
		//	{richstring::RichStringRef} "ref" refId=STRING expression=InternalRichString "/ref";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringRef} "ref" refId=STRING expression=InternalRichString "/ref"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringRef}
		public Action getRichStringRefAction_0() { return cRichStringRefAction_0; }

		//"ref"
		public Keyword getRefKeyword_1() { return cRefKeyword_1; }

		//refId=STRING
		public Assignment getRefIdAssignment_2() { return cRefIdAssignment_2; }

		//STRING
		public RuleCall getRefIdSTRINGTerminalRuleCall_2_0() { return cRefIdSTRINGTerminalRuleCall_2_0; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_3_0() { return cExpressionInternalRichStringParserRuleCall_3_0; }

		//"/ref"
		public Keyword getRefKeyword_4() { return cRefKeyword_4; }
	}

	public class RichStringMailtoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringMailto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringMailtoAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMailtoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEmailAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEmailSTRINGTerminalRuleCall_2_0 = (RuleCall)cEmailAssignment_2.eContents().get(0);
		private final Assignment cContentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContentInternalRichStringParserRuleCall_3_0 = (RuleCall)cContentAssignment_3.eContents().get(0);
		private final Keyword cMailtoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RichStringMailto returns xbase::XExpression:
		//	{richstring::RichStringMailto} "mailto" email=STRING content=InternalRichString "/mailto";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringMailto} "mailto" email=STRING content=InternalRichString "/mailto"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringMailto}
		public Action getRichStringMailtoAction_0() { return cRichStringMailtoAction_0; }

		//"mailto"
		public Keyword getMailtoKeyword_1() { return cMailtoKeyword_1; }

		//email=STRING
		public Assignment getEmailAssignment_2() { return cEmailAssignment_2; }

		//STRING
		public RuleCall getEmailSTRINGTerminalRuleCall_2_0() { return cEmailSTRINGTerminalRuleCall_2_0; }

		//content=InternalRichString
		public Assignment getContentAssignment_3() { return cContentAssignment_3; }

		//InternalRichString
		public RuleCall getContentInternalRichStringParserRuleCall_3_0() { return cContentInternalRichStringParserRuleCall_3_0; }

		//"/mailto"
		public Keyword getMailtoKeyword_4() { return cMailtoKeyword_4; }
	}

	public class RichStringSkypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringSkype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringSkypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSkypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTargetSTRINGTerminalRuleCall_2_0 = (RuleCall)cTargetAssignment_2.eContents().get(0);
		private final Assignment cContentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContentInternalRichStringParserRuleCall_3_0 = (RuleCall)cContentAssignment_3.eContents().get(0);
		private final Keyword cSkypeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RichStringSkype returns xbase::XExpression:
		//	{richstring::RichStringSkype} "skype" target=STRING content=InternalRichString "/skype";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringSkype} "skype" target=STRING content=InternalRichString "/skype"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringSkype}
		public Action getRichStringSkypeAction_0() { return cRichStringSkypeAction_0; }

		//"skype"
		public Keyword getSkypeKeyword_1() { return cSkypeKeyword_1; }

		//target=STRING
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }

		//STRING
		public RuleCall getTargetSTRINGTerminalRuleCall_2_0() { return cTargetSTRINGTerminalRuleCall_2_0; }

		//content=InternalRichString
		public Assignment getContentAssignment_3() { return cContentAssignment_3; }

		//InternalRichString
		public RuleCall getContentInternalRichStringParserRuleCall_3_0() { return cContentInternalRichStringParserRuleCall_3_0; }

		//"/skype"
		public Keyword getSkypeKeyword_4() { return cSkypeKeyword_4; }
	}

	public class RichStringMovieElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringMovie");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringMovieAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMovieKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSrcKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSrcAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSrcSTRINGTerminalRuleCall_3_0 = (RuleCall)cSrcAssignment_3.eContents().get(0);
		private final Keyword cTypeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeSTRINGTerminalRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		private final Keyword cWidthKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cWidthAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cWidthSTRINGTerminalRuleCall_7_0 = (RuleCall)cWidthAssignment_7.eContents().get(0);
		private final Keyword cHeightKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cHeightAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cHeightSTRINGTerminalRuleCall_9_0 = (RuleCall)cHeightAssignment_9.eContents().get(0);
		private final Assignment cContentAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cContentInternalRichStringParserRuleCall_10_0 = (RuleCall)cContentAssignment_10.eContents().get(0);
		private final Keyword cMovieKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//RichStringMovie returns xbase::XExpression:
		//	{richstring::RichStringMovie} "movie" "src=" src=STRING "type=" type=STRING "width=" width=STRING "height="
		//	height=STRING content=InternalRichString "/movie";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringMovie} "movie" "src=" src=STRING "type=" type=STRING "width=" width=STRING "height="
		//height=STRING content=InternalRichString "/movie"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringMovie}
		public Action getRichStringMovieAction_0() { return cRichStringMovieAction_0; }

		//"movie"
		public Keyword getMovieKeyword_1() { return cMovieKeyword_1; }

		//"src="
		public Keyword getSrcKeyword_2() { return cSrcKeyword_2; }

		//src=STRING
		public Assignment getSrcAssignment_3() { return cSrcAssignment_3; }

		//STRING
		public RuleCall getSrcSTRINGTerminalRuleCall_3_0() { return cSrcSTRINGTerminalRuleCall_3_0; }

		//"type="
		public Keyword getTypeKeyword_4() { return cTypeKeyword_4; }

		//type=STRING
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }

		//STRING
		public RuleCall getTypeSTRINGTerminalRuleCall_5_0() { return cTypeSTRINGTerminalRuleCall_5_0; }

		//"width="
		public Keyword getWidthKeyword_6() { return cWidthKeyword_6; }

		//width=STRING
		public Assignment getWidthAssignment_7() { return cWidthAssignment_7; }

		//STRING
		public RuleCall getWidthSTRINGTerminalRuleCall_7_0() { return cWidthSTRINGTerminalRuleCall_7_0; }

		//"height="
		public Keyword getHeightKeyword_8() { return cHeightKeyword_8; }

		//height=STRING
		public Assignment getHeightAssignment_9() { return cHeightAssignment_9; }

		//STRING
		public RuleCall getHeightSTRINGTerminalRuleCall_9_0() { return cHeightSTRINGTerminalRuleCall_9_0; }

		//content=InternalRichString
		public Assignment getContentAssignment_10() { return cContentAssignment_10; }

		//InternalRichString
		public RuleCall getContentInternalRichStringParserRuleCall_10_0() { return cContentInternalRichStringParserRuleCall_10_0; }

		//"/movie"
		public Keyword getMovieKeyword_11() { return cMovieKeyword_11; }
	}

	public class RichStringImgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringImg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringImgAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cImgKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSrcKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSrcAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSrcSTRINGTerminalRuleCall_3_0 = (RuleCall)cSrcAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAltKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAltAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAltSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cAltAssignment_4_1.eContents().get(0);
		private final Assignment cSmallAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cSmallSmallKeyword_5_0 = (Keyword)cSmallAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cOrientationKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cOrientationAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cOrientationMarkupOrientationEnumRuleCall_6_1_0 = (RuleCall)cOrientationAssignment_6_1.eContents().get(0);
		private final Keyword cSolidusKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//RichStringImg returns xbase::XExpression:
		//	{richstring::RichStringImg} "img" "src=" src=STRING ("alt=" alt=STRING)? small?="small"? ("orientation="
		//	orientation=MarkupOrientation)? "/";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringImg} "img" "src=" src=STRING ("alt=" alt=STRING)? small?="small"? ("orientation="
		//orientation=MarkupOrientation)? "/"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringImg}
		public Action getRichStringImgAction_0() { return cRichStringImgAction_0; }

		//"img"
		public Keyword getImgKeyword_1() { return cImgKeyword_1; }

		//"src="
		public Keyword getSrcKeyword_2() { return cSrcKeyword_2; }

		//src=STRING
		public Assignment getSrcAssignment_3() { return cSrcAssignment_3; }

		//STRING
		public RuleCall getSrcSTRINGTerminalRuleCall_3_0() { return cSrcSTRINGTerminalRuleCall_3_0; }

		//("alt=" alt=STRING)?
		public Group getGroup_4() { return cGroup_4; }

		//"alt="
		public Keyword getAltKeyword_4_0() { return cAltKeyword_4_0; }

		//alt=STRING
		public Assignment getAltAssignment_4_1() { return cAltAssignment_4_1; }

		//STRING
		public RuleCall getAltSTRINGTerminalRuleCall_4_1_0() { return cAltSTRINGTerminalRuleCall_4_1_0; }

		//small?="small"?
		public Assignment getSmallAssignment_5() { return cSmallAssignment_5; }

		//"small"
		public Keyword getSmallSmallKeyword_5_0() { return cSmallSmallKeyword_5_0; }

		//("orientation=" orientation=MarkupOrientation)?
		public Group getGroup_6() { return cGroup_6; }

		//"orientation="
		public Keyword getOrientationKeyword_6_0() { return cOrientationKeyword_6_0; }

		//orientation=MarkupOrientation
		public Assignment getOrientationAssignment_6_1() { return cOrientationAssignment_6_1; }

		//MarkupOrientation
		public RuleCall getOrientationMarkupOrientationEnumRuleCall_6_1_0() { return cOrientationMarkupOrientationEnumRuleCall_6_1_0; }

		//"/"
		public Keyword getSolidusKeyword_7() { return cSolidusKeyword_7; }
	}

	public class RichStringBoldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringBold");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringBoldAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cBKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RichStringBold returns xbase::XExpression:
		//	{richstring::RichStringBold} "b" expression=InternalRichString "/b";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringBold} "b" expression=InternalRichString "/b"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringBold}
		public Action getRichStringBoldAction_0() { return cRichStringBoldAction_0; }

		//"b"
		public Keyword getBKeyword_1() { return cBKeyword_1; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_2_0() { return cExpressionInternalRichStringParserRuleCall_2_0; }

		//"/b"
		public Keyword getBKeyword_3() { return cBKeyword_3; }
	}

	public class RichStringUnderlineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringUnderline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringUnderlineAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cUKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RichStringUnderline returns xbase::XExpression:
		//	{richstring::RichStringUnderline} "u" expression=InternalRichString "/u";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringUnderline} "u" expression=InternalRichString "/u"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringUnderline}
		public Action getRichStringUnderlineAction_0() { return cRichStringUnderlineAction_0; }

		//"u"
		public Keyword getUKeyword_1() { return cUKeyword_1; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_2_0() { return cExpressionInternalRichStringParserRuleCall_2_0; }

		//"/u"
		public Keyword getUKeyword_3() { return cUKeyword_3; }
	}

	public class RichStringItalicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringItalic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringItalicAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cIKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RichStringItalic returns xbase::XExpression:
		//	{richstring::RichStringItalic} "i" expression=InternalRichString "/i";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringItalic} "i" expression=InternalRichString "/i"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringItalic}
		public Action getRichStringItalicAction_0() { return cRichStringItalicAction_0; }

		//"i"
		public Keyword getIKeyword_1() { return cIKeyword_1; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_2_0() { return cExpressionInternalRichStringParserRuleCall_2_0; }

		//"/i"
		public Keyword getIKeyword_3() { return cIKeyword_3; }
	}

	public class RichStringSpanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringSpan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringSpanAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStyleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStyleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStyleSTRINGTerminalRuleCall_2_0 = (RuleCall)cStyleAssignment_2.eContents().get(0);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cStyleKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RichStringSpan returns xbase::XExpression:
		//	{richstring::RichStringSpan} "style" style=STRING expression=InternalRichString "/style";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringSpan} "style" style=STRING expression=InternalRichString "/style"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringSpan}
		public Action getRichStringSpanAction_0() { return cRichStringSpanAction_0; }

		//"style"
		public Keyword getStyleKeyword_1() { return cStyleKeyword_1; }

		//style=STRING
		public Assignment getStyleAssignment_2() { return cStyleAssignment_2; }

		//STRING
		public RuleCall getStyleSTRINGTerminalRuleCall_2_0() { return cStyleSTRINGTerminalRuleCall_2_0; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_3_0() { return cExpressionInternalRichStringParserRuleCall_3_0; }

		//"/style"
		public Keyword getStyleKeyword_4() { return cStyleKeyword_4; }
	}

	public class RichStringCodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringCode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringCodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCodeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLangKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLangAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLangSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cLangAssignment_2_1.eContents().get(0);
		private final Assignment cContentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContentInternalRichStringParserRuleCall_3_0 = (RuleCall)cContentAssignment_3.eContents().get(0);
		private final Keyword cCodeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RichStringCode returns xbase::XExpression:
		//	{richstring::RichStringCode} "code" ("lang=" lang=STRING)? content=InternalRichString "/code";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringCode} "code" ("lang=" lang=STRING)? content=InternalRichString "/code"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringCode}
		public Action getRichStringCodeAction_0() { return cRichStringCodeAction_0; }

		//"code"
		public Keyword getCodeKeyword_1() { return cCodeKeyword_1; }

		//("lang=" lang=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//"lang="
		public Keyword getLangKeyword_2_0() { return cLangKeyword_2_0; }

		//lang=STRING
		public Assignment getLangAssignment_2_1() { return cLangAssignment_2_1; }

		//STRING
		public RuleCall getLangSTRINGTerminalRuleCall_2_1_0() { return cLangSTRINGTerminalRuleCall_2_1_0; }

		//content=InternalRichString
		public Assignment getContentAssignment_3() { return cContentAssignment_3; }

		//InternalRichString
		public RuleCall getContentInternalRichStringParserRuleCall_3_0() { return cContentInternalRichStringParserRuleCall_3_0; }

		//"/code"
		public Keyword getCodeKeyword_4() { return cCodeKeyword_4; }
	}

	public class RichStringTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringTableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTableKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cTableKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RichStringTable returns xbase::XExpression:
		//	{richstring::RichStringTable} "table" expression=InternalRichString "/table";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringTable} "table" expression=InternalRichString "/table"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringTable}
		public Action getRichStringTableAction_0() { return cRichStringTableAction_0; }

		//"table"
		public Keyword getTableKeyword_1() { return cTableKeyword_1; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_2_0() { return cExpressionInternalRichStringParserRuleCall_2_0; }

		//"/table"
		public Keyword getTableKeyword_3() { return cTableKeyword_3; }
	}

	public class RichStringTableRowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringTableRow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringTableRowAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRowKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RichStringTableRow returns richstring::RichStringTableRow:
		//	{richstring::RichStringTableRow} "row" expression=InternalRichString "/row";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringTableRow} "row" expression=InternalRichString "/row"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringTableRow}
		public Action getRichStringTableRowAction_0() { return cRichStringTableRowAction_0; }

		//"row"
		public Keyword getRowKeyword_1() { return cRowKeyword_1; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_2_0() { return cExpressionInternalRichStringParserRuleCall_2_0; }

		//"/row"
		public Keyword getRowKeyword_3() { return cRowKeyword_3; }
	}

	public class RichStringTableCellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringTableCell");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringTableCellAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCellKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cCellKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RichStringTableCell returns xbase::XExpression:
		//	{richstring::RichStringTableCell} "cell" expression=InternalRichString "/cell";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringTableCell} "cell" expression=InternalRichString "/cell"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringTableCell}
		public Action getRichStringTableCellAction_0() { return cRichStringTableCellAction_0; }

		//"cell"
		public Keyword getCellKeyword_1() { return cCellKeyword_1; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_2_0() { return cExpressionInternalRichStringParserRuleCall_2_0; }

		//"/cell"
		public Keyword getCellKeyword_3() { return cCellKeyword_3; }
	}

	public class RichStringListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUlKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cUlKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RichStringList returns xbase::XExpression:
		//	{richstring::RichStringList} "ul" expression=InternalRichString "/ul";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringList} "ul" expression=InternalRichString "/ul"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringList}
		public Action getRichStringListAction_0() { return cRichStringListAction_0; }

		//"ul"
		public Keyword getUlKeyword_1() { return cUlKeyword_1; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_2_0() { return cExpressionInternalRichStringParserRuleCall_2_0; }

		//"/ul"
		public Keyword getUlKeyword_3() { return cUlKeyword_3; }
	}

	public class RichStringOrderedListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringOrderedList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringOrderedListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOlKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cOlKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RichStringOrderedList returns xbase::XExpression:
		//	{richstring::RichStringOrderedList} "ol" expression=InternalRichString "/ol";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringOrderedList} "ol" expression=InternalRichString "/ol"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringOrderedList}
		public Action getRichStringOrderedListAction_0() { return cRichStringOrderedListAction_0; }

		//"ol"
		public Keyword getOlKeyword_1() { return cOlKeyword_1; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_2_0() { return cExpressionInternalRichStringParserRuleCall_2_0; }

		//"/ol"
		public Keyword getOlKeyword_3() { return cOlKeyword_3; }
	}

	public class RichStringListElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringListElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringListElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLiKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cLiKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RichStringListElement returns richstring::RichStringListElement:
		//	{richstring::RichStringListElement} "li" expression=InternalRichString "/li";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringListElement} "li" expression=InternalRichString "/li"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringListElement}
		public Action getRichStringListElementAction_0() { return cRichStringListElementAction_0; }

		//"li"
		public Keyword getLiKeyword_1() { return cLiKeyword_1; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_2_0() { return cExpressionInternalRichStringParserRuleCall_2_0; }

		//"/li"
		public Keyword getLiKeyword_3() { return cLiKeyword_3; }
	}

	public class RichStringOpenViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringOpenView");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringOpenViewAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOpenviewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cViewIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cViewIdSTRINGTerminalRuleCall_2_0 = (RuleCall)cViewIdAssignment_2.eContents().get(0);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cOpenviewKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RichStringOpenView returns xbase::XExpression:
		//	{richstring::RichStringOpenView} "openview" viewId=STRING expression=InternalRichString "/openview";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringOpenView} "openview" viewId=STRING expression=InternalRichString "/openview"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringOpenView}
		public Action getRichStringOpenViewAction_0() { return cRichStringOpenViewAction_0; }

		//"openview"
		public Keyword getOpenviewKeyword_1() { return cOpenviewKeyword_1; }

		//viewId=STRING
		public Assignment getViewIdAssignment_2() { return cViewIdAssignment_2; }

		//STRING
		public RuleCall getViewIdSTRINGTerminalRuleCall_2_0() { return cViewIdSTRINGTerminalRuleCall_2_0; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_3_0() { return cExpressionInternalRichStringParserRuleCall_3_0; }

		//"/openview"
		public Keyword getOpenviewKeyword_4() { return cOpenviewKeyword_4; }
	}

	public class RichStringStartProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringStartProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringStartProcessAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStartprocessKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProcessIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProcessIdSTRINGTerminalRuleCall_2_0 = (RuleCall)cProcessIdAssignment_2.eContents().get(0);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cStartprocessKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RichStringStartProcess returns xbase::XExpression:
		//	{richstring::RichStringStartProcess} "startprocess" processId=STRING expression=InternalRichString "/startprocess";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringStartProcess} "startprocess" processId=STRING expression=InternalRichString "/startprocess"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringStartProcess}
		public Action getRichStringStartProcessAction_0() { return cRichStringStartProcessAction_0; }

		//"startprocess"
		public Keyword getStartprocessKeyword_1() { return cStartprocessKeyword_1; }

		//processId=STRING
		public Assignment getProcessIdAssignment_2() { return cProcessIdAssignment_2; }

		//STRING
		public RuleCall getProcessIdSTRINGTerminalRuleCall_2_0() { return cProcessIdSTRINGTerminalRuleCall_2_0; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_3_0() { return cExpressionInternalRichStringParserRuleCall_3_0; }

		//"/startprocess"
		public Keyword getStartprocessKeyword_4() { return cStartprocessKeyword_4; }
	}

	public class RichStringEntityRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringEntityRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringEntityRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEntityRefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEntityDocAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEntityDocLDocEntityDocumentCrossReference_2_0 = (CrossReference)cEntityDocAssignment_2.eContents().get(0);
		private final RuleCall cEntityDocLDocEntityDocumentQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cEntityDocLDocEntityDocumentCrossReference_2_0.eContents().get(1);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cEntityRefKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RichStringEntityRef returns xbase::XExpression:
		//	{richstring::RichStringEntityRef} "entity-ref" entityDoc=[doc::LDocEntityDocument|QualifiedName]
		//	expression=InternalRichString "/entity-ref";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringEntityRef} "entity-ref" entityDoc=[doc::LDocEntityDocument|QualifiedName]
		//expression=InternalRichString "/entity-ref"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringEntityRef}
		public Action getRichStringEntityRefAction_0() { return cRichStringEntityRefAction_0; }

		//"entity-ref"
		public Keyword getEntityRefKeyword_1() { return cEntityRefKeyword_1; }

		//entityDoc=[doc::LDocEntityDocument|QualifiedName]
		public Assignment getEntityDocAssignment_2() { return cEntityDocAssignment_2; }

		//[doc::LDocEntityDocument|QualifiedName]
		public CrossReference getEntityDocLDocEntityDocumentCrossReference_2_0() { return cEntityDocLDocEntityDocumentCrossReference_2_0; }

		//QualifiedName
		public RuleCall getEntityDocLDocEntityDocumentQualifiedNameParserRuleCall_2_0_1() { return cEntityDocLDocEntityDocumentQualifiedNameParserRuleCall_2_0_1; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_3_0() { return cExpressionInternalRichStringParserRuleCall_3_0; }

		//"/entity-ref"
		public Keyword getEntityRefKeyword_4() { return cEntityRefKeyword_4; }
	}

	public class RichStringDTORefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringDTORef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringDTORefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDtoRefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDtoDocAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDtoDocLDocDtoDocumentCrossReference_2_0 = (CrossReference)cDtoDocAssignment_2.eContents().get(0);
		private final RuleCall cDtoDocLDocDtoDocumentQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cDtoDocLDocDtoDocumentCrossReference_2_0.eContents().get(1);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cDtoRefKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RichStringDTORef returns xbase::XExpression:
		//	{richstring::RichStringDTORef} "dto-ref" dtoDoc=[doc::LDocDtoDocument|QualifiedName] expression=InternalRichString
		//	"/dto-ref";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringDTORef} "dto-ref" dtoDoc=[doc::LDocDtoDocument|QualifiedName] expression=InternalRichString
		//"/dto-ref"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringDTORef}
		public Action getRichStringDTORefAction_0() { return cRichStringDTORefAction_0; }

		//"dto-ref"
		public Keyword getDtoRefKeyword_1() { return cDtoRefKeyword_1; }

		//dtoDoc=[doc::LDocDtoDocument|QualifiedName]
		public Assignment getDtoDocAssignment_2() { return cDtoDocAssignment_2; }

		//[doc::LDocDtoDocument|QualifiedName]
		public CrossReference getDtoDocLDocDtoDocumentCrossReference_2_0() { return cDtoDocLDocDtoDocumentCrossReference_2_0; }

		//QualifiedName
		public RuleCall getDtoDocLDocDtoDocumentQualifiedNameParserRuleCall_2_0_1() { return cDtoDocLDocDtoDocumentQualifiedNameParserRuleCall_2_0_1; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_3_0() { return cExpressionInternalRichStringParserRuleCall_3_0; }

		//"/dto-ref"
		public Keyword getDtoRefKeyword_4() { return cDtoRefKeyword_4; }
	}

	public class RichStringProcessRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringProcessRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringProcessRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProcessRefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBpmDocAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cBpmDocLDocBPMProcessDocumentCrossReference_2_0 = (CrossReference)cBpmDocAssignment_2.eContents().get(0);
		private final RuleCall cBpmDocLDocBPMProcessDocumentQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cBpmDocLDocBPMProcessDocumentCrossReference_2_0.eContents().get(1);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cProcessRefKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RichStringProcessRef returns xbase::XExpression:
		//	{richstring::RichStringProcessRef} "process-ref" bpmDoc=[doc::LDocBPMProcessDocument|QualifiedName]
		//	expression=InternalRichString "/process-ref";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringProcessRef} "process-ref" bpmDoc=[doc::LDocBPMProcessDocument|QualifiedName]
		//expression=InternalRichString "/process-ref"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringProcessRef}
		public Action getRichStringProcessRefAction_0() { return cRichStringProcessRefAction_0; }

		//"process-ref"
		public Keyword getProcessRefKeyword_1() { return cProcessRefKeyword_1; }

		//bpmDoc=[doc::LDocBPMProcessDocument|QualifiedName]
		public Assignment getBpmDocAssignment_2() { return cBpmDocAssignment_2; }

		//[doc::LDocBPMProcessDocument|QualifiedName]
		public CrossReference getBpmDocLDocBPMProcessDocumentCrossReference_2_0() { return cBpmDocLDocBPMProcessDocumentCrossReference_2_0; }

		//QualifiedName
		public RuleCall getBpmDocLDocBPMProcessDocumentQualifiedNameParserRuleCall_2_0_1() { return cBpmDocLDocBPMProcessDocumentQualifiedNameParserRuleCall_2_0_1; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_3_0() { return cExpressionInternalRichStringParserRuleCall_3_0; }

		//"/process-ref"
		public Keyword getProcessRefKeyword_4() { return cProcessRefKeyword_4; }
	}

	public class RichStringTaskRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringTaskRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringTaskRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTaskRefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTaskDocAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTaskDocLDocHumanTaskDocumentCrossReference_2_0 = (CrossReference)cTaskDocAssignment_2.eContents().get(0);
		private final RuleCall cTaskDocLDocHumanTaskDocumentQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cTaskDocLDocHumanTaskDocumentCrossReference_2_0.eContents().get(1);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cTaskRefKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RichStringTaskRef returns xbase::XExpression:
		//	{richstring::RichStringTaskRef} "task-ref" taskDoc=[doc::LDocHumanTaskDocument|QualifiedName]
		//	expression=InternalRichString "/task-ref";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringTaskRef} "task-ref" taskDoc=[doc::LDocHumanTaskDocument|QualifiedName]
		//expression=InternalRichString "/task-ref"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringTaskRef}
		public Action getRichStringTaskRefAction_0() { return cRichStringTaskRefAction_0; }

		//"task-ref"
		public Keyword getTaskRefKeyword_1() { return cTaskRefKeyword_1; }

		//taskDoc=[doc::LDocHumanTaskDocument|QualifiedName]
		public Assignment getTaskDocAssignment_2() { return cTaskDocAssignment_2; }

		//[doc::LDocHumanTaskDocument|QualifiedName]
		public CrossReference getTaskDocLDocHumanTaskDocumentCrossReference_2_0() { return cTaskDocLDocHumanTaskDocumentCrossReference_2_0; }

		//QualifiedName
		public RuleCall getTaskDocLDocHumanTaskDocumentQualifiedNameParserRuleCall_2_0_1() { return cTaskDocLDocHumanTaskDocumentQualifiedNameParserRuleCall_2_0_1; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_3_0() { return cExpressionInternalRichStringParserRuleCall_3_0; }

		//"/task-ref"
		public Keyword getTaskRefKeyword_4() { return cTaskRefKeyword_4; }
	}

	public class RichStringViewRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringViewRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringViewRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cViewRefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cViewDocAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cViewDocLDocViewDocumentCrossReference_2_0 = (CrossReference)cViewDocAssignment_2.eContents().get(0);
		private final RuleCall cViewDocLDocViewDocumentQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cViewDocLDocViewDocumentCrossReference_2_0.eContents().get(1);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cViewRefKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RichStringViewRef returns xbase::XExpression:
		//	{richstring::RichStringViewRef} "view-ref" viewDoc=[doc::LDocViewDocument|QualifiedName] expression=InternalRichString
		//	"/view-ref";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringViewRef} "view-ref" viewDoc=[doc::LDocViewDocument|QualifiedName] expression=InternalRichString
		//"/view-ref"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringViewRef}
		public Action getRichStringViewRefAction_0() { return cRichStringViewRefAction_0; }

		//"view-ref"
		public Keyword getViewRefKeyword_1() { return cViewRefKeyword_1; }

		//viewDoc=[doc::LDocViewDocument|QualifiedName]
		public Assignment getViewDocAssignment_2() { return cViewDocAssignment_2; }

		//[doc::LDocViewDocument|QualifiedName]
		public CrossReference getViewDocLDocViewDocumentCrossReference_2_0() { return cViewDocLDocViewDocumentCrossReference_2_0; }

		//QualifiedName
		public RuleCall getViewDocLDocViewDocumentQualifiedNameParserRuleCall_2_0_1() { return cViewDocLDocViewDocumentQualifiedNameParserRuleCall_2_0_1; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_3_0() { return cExpressionInternalRichStringParserRuleCall_3_0; }

		//"/view-ref"
		public Keyword getViewRefKeyword_4() { return cViewRefKeyword_4; }
	}

	public class RichStringUIRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringUIRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringUIRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUiRefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUiDocAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cUiDocLDocUIDocumentCrossReference_2_0 = (CrossReference)cUiDocAssignment_2.eContents().get(0);
		private final RuleCall cUiDocLDocUIDocumentQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cUiDocLDocUIDocumentCrossReference_2_0.eContents().get(1);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cUiRefKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RichStringUIRef returns xbase::XExpression:
		//	{richstring::RichStringUIRef} "ui-ref" uiDoc=[doc::LDocUIDocument|QualifiedName] expression=InternalRichString
		//	"/ui-ref";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringUIRef} "ui-ref" uiDoc=[doc::LDocUIDocument|QualifiedName] expression=InternalRichString "/ui-ref"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringUIRef}
		public Action getRichStringUIRefAction_0() { return cRichStringUIRefAction_0; }

		//"ui-ref"
		public Keyword getUiRefKeyword_1() { return cUiRefKeyword_1; }

		//uiDoc=[doc::LDocUIDocument|QualifiedName]
		public Assignment getUiDocAssignment_2() { return cUiDocAssignment_2; }

		//[doc::LDocUIDocument|QualifiedName]
		public CrossReference getUiDocLDocUIDocumentCrossReference_2_0() { return cUiDocLDocUIDocumentCrossReference_2_0; }

		//QualifiedName
		public RuleCall getUiDocLDocUIDocumentQualifiedNameParserRuleCall_2_0_1() { return cUiDocLDocUIDocumentQualifiedNameParserRuleCall_2_0_1; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_3_0() { return cExpressionInternalRichStringParserRuleCall_3_0; }

		//"/ui-ref"
		public Keyword getUiRefKeyword_4() { return cUiRefKeyword_4; }
	}

	public class RichStringForLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringForLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringForLoopAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclaredParamAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclaredParamJvmFormalParameterParserRuleCall_2_0 = (RuleCall)cDeclaredParamAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cForExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cForExpressionXExpressionParserRuleCall_4_0 = (RuleCall)cForExpressionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cBeforeKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cBeforeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cBeforeXExpressionParserRuleCall_5_1_0 = (RuleCall)cBeforeAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cSeparatorKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSeparatorAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSeparatorXExpressionParserRuleCall_6_1_0 = (RuleCall)cSeparatorAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cAfterKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cAfterAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cAfterXExpressionParserRuleCall_7_1_0 = (RuleCall)cAfterAssignment_7_1.eContents().get(0);
		private final Assignment cEachExpressionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cEachExpressionInternalRichStringParserRuleCall_8_0 = (RuleCall)cEachExpressionAssignment_8.eContents().get(0);
		private final Keyword cEndforKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//RichStringForLoop returns xbase::XExpression:
		//	{richstring::RichStringForLoop} "For" declaredParam=JvmFormalParameter ":" forExpression=XExpression ("Before"
		//	before=XExpression)? ("Separator" separator=XExpression)? ("After" after=XExpression)?
		//	eachExpression=InternalRichString "Endfor";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringForLoop} "For" declaredParam=JvmFormalParameter ":" forExpression=XExpression ("Before"
		//before=XExpression)? ("Separator" separator=XExpression)? ("After" after=XExpression)?
		//eachExpression=InternalRichString "Endfor"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringForLoop}
		public Action getRichStringForLoopAction_0() { return cRichStringForLoopAction_0; }

		//"For"
		public Keyword getForKeyword_1() { return cForKeyword_1; }

		//declaredParam=JvmFormalParameter
		public Assignment getDeclaredParamAssignment_2() { return cDeclaredParamAssignment_2; }

		//JvmFormalParameter
		public RuleCall getDeclaredParamJvmFormalParameterParserRuleCall_2_0() { return cDeclaredParamJvmFormalParameterParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//forExpression=XExpression
		public Assignment getForExpressionAssignment_4() { return cForExpressionAssignment_4; }

		//XExpression
		public RuleCall getForExpressionXExpressionParserRuleCall_4_0() { return cForExpressionXExpressionParserRuleCall_4_0; }

		//("Before" before=XExpression)?
		public Group getGroup_5() { return cGroup_5; }

		//"Before"
		public Keyword getBeforeKeyword_5_0() { return cBeforeKeyword_5_0; }

		//before=XExpression
		public Assignment getBeforeAssignment_5_1() { return cBeforeAssignment_5_1; }

		//XExpression
		public RuleCall getBeforeXExpressionParserRuleCall_5_1_0() { return cBeforeXExpressionParserRuleCall_5_1_0; }

		//("Separator" separator=XExpression)?
		public Group getGroup_6() { return cGroup_6; }

		//"Separator"
		public Keyword getSeparatorKeyword_6_0() { return cSeparatorKeyword_6_0; }

		//separator=XExpression
		public Assignment getSeparatorAssignment_6_1() { return cSeparatorAssignment_6_1; }

		//XExpression
		public RuleCall getSeparatorXExpressionParserRuleCall_6_1_0() { return cSeparatorXExpressionParserRuleCall_6_1_0; }

		//("After" after=XExpression)?
		public Group getGroup_7() { return cGroup_7; }

		//"After"
		public Keyword getAfterKeyword_7_0() { return cAfterKeyword_7_0; }

		//after=XExpression
		public Assignment getAfterAssignment_7_1() { return cAfterAssignment_7_1; }

		//XExpression
		public RuleCall getAfterXExpressionParserRuleCall_7_1_0() { return cAfterXExpressionParserRuleCall_7_1_0; }

		//eachExpression=InternalRichString
		public Assignment getEachExpressionAssignment_8() { return cEachExpressionAssignment_8; }

		//InternalRichString
		public RuleCall getEachExpressionInternalRichStringParserRuleCall_8_0() { return cEachExpressionInternalRichStringParserRuleCall_8_0; }

		//"Endfor"
		public Keyword getEndforKeyword_9() { return cEndforKeyword_9; }
	}

	public class RichStringIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringIfAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIfAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIfXExpressionParserRuleCall_2_0 = (RuleCall)cIfAssignment_2.eContents().get(0);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenInternalRichStringParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		private final Assignment cElseIfsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElseIfsRichStringElseIfParserRuleCall_4_0 = (RuleCall)cElseIfsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseInternalRichStringParserRuleCall_5_1_0 = (RuleCall)cElseAssignment_5_1.eContents().get(0);
		private final Keyword cEndIfKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//RichStringIf returns xbase::XExpression:
		//	{richstring::RichStringIf} "If" if=XExpression then=InternalRichString elseIfs+=RichStringElseIf* ("Else"
		//	else=InternalRichString)? "EndIf";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringIf} "If" if=XExpression then=InternalRichString elseIfs+=RichStringElseIf* ("Else"
		//else=InternalRichString)? "EndIf"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringIf}
		public Action getRichStringIfAction_0() { return cRichStringIfAction_0; }

		//"If"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//if=XExpression
		public Assignment getIfAssignment_2() { return cIfAssignment_2; }

		//XExpression
		public RuleCall getIfXExpressionParserRuleCall_2_0() { return cIfXExpressionParserRuleCall_2_0; }

		//then=InternalRichString
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }

		//InternalRichString
		public RuleCall getThenInternalRichStringParserRuleCall_3_0() { return cThenInternalRichStringParserRuleCall_3_0; }

		//elseIfs+=RichStringElseIf*
		public Assignment getElseIfsAssignment_4() { return cElseIfsAssignment_4; }

		//RichStringElseIf
		public RuleCall getElseIfsRichStringElseIfParserRuleCall_4_0() { return cElseIfsRichStringElseIfParserRuleCall_4_0; }

		//("Else" else=InternalRichString)?
		public Group getGroup_5() { return cGroup_5; }

		//"Else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//else=InternalRichString
		public Assignment getElseAssignment_5_1() { return cElseAssignment_5_1; }

		//InternalRichString
		public RuleCall getElseInternalRichStringParserRuleCall_5_1_0() { return cElseInternalRichStringParserRuleCall_5_1_0; }

		//"EndIf"
		public Keyword getEndIfKeyword_6() { return cEndIfKeyword_6; }
	}

	public class RichStringInfoBoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringInfoBox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringBoxAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cInfoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cInfoInfoboxKeyword_1_0 = (Keyword)cInfoAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTitleKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTitleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cTitleAssignment_2_1.eContents().get(0);
		private final Assignment cSmallAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cSmallSmallKeyword_3_0 = (Keyword)cSmallAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOrientationKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOrientationAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOrientationMarkupOrientationEnumRuleCall_4_1_0 = (RuleCall)cOrientationAssignment_4_1.eContents().get(0);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		private final Keyword cInfoboxKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//RichStringInfoBox returns xbase::XExpression:
		//	{richstring::RichStringBox} info?="infobox" ("title=" title=STRING) small?="small"? ("orientation="
		//	orientation=MarkupOrientation)? expression=InternalRichString "/infobox";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringBox} info?="infobox" ("title=" title=STRING) small?="small"? ("orientation="
		//orientation=MarkupOrientation)? expression=InternalRichString "/infobox"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringBox}
		public Action getRichStringBoxAction_0() { return cRichStringBoxAction_0; }

		//info?="infobox"
		public Assignment getInfoAssignment_1() { return cInfoAssignment_1; }

		//"infobox"
		public Keyword getInfoInfoboxKeyword_1_0() { return cInfoInfoboxKeyword_1_0; }

		//"title=" title=STRING
		public Group getGroup_2() { return cGroup_2; }

		//"title="
		public Keyword getTitleKeyword_2_0() { return cTitleKeyword_2_0; }

		//title=STRING
		public Assignment getTitleAssignment_2_1() { return cTitleAssignment_2_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_2_1_0() { return cTitleSTRINGTerminalRuleCall_2_1_0; }

		//small?="small"?
		public Assignment getSmallAssignment_3() { return cSmallAssignment_3; }

		//"small"
		public Keyword getSmallSmallKeyword_3_0() { return cSmallSmallKeyword_3_0; }

		//("orientation=" orientation=MarkupOrientation)?
		public Group getGroup_4() { return cGroup_4; }

		//"orientation="
		public Keyword getOrientationKeyword_4_0() { return cOrientationKeyword_4_0; }

		//orientation=MarkupOrientation
		public Assignment getOrientationAssignment_4_1() { return cOrientationAssignment_4_1; }

		//MarkupOrientation
		public RuleCall getOrientationMarkupOrientationEnumRuleCall_4_1_0() { return cOrientationMarkupOrientationEnumRuleCall_4_1_0; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_5_0() { return cExpressionInternalRichStringParserRuleCall_5_0; }

		//"/infobox"
		public Keyword getInfoboxKeyword_6() { return cInfoboxKeyword_6; }
	}

	public class RichStringErrorBoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringErrorBox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringBoxAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cErrorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cErrorErrorboxKeyword_1_0 = (Keyword)cErrorAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTitleKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTitleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cTitleAssignment_2_1.eContents().get(0);
		private final Assignment cSmallAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cSmallSmallKeyword_3_0 = (Keyword)cSmallAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOrientationKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOrientationAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOrientationMarkupOrientationEnumRuleCall_4_1_0 = (RuleCall)cOrientationAssignment_4_1.eContents().get(0);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		private final Keyword cErrorboxKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//RichStringErrorBox returns xbase::XExpression:
		//	{richstring::RichStringBox} error?="errorbox" ("title=" title=STRING) small?="small"? ("orientation="
		//	orientation=MarkupOrientation)? expression=InternalRichString "/errorbox";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringBox} error?="errorbox" ("title=" title=STRING) small?="small"? ("orientation="
		//orientation=MarkupOrientation)? expression=InternalRichString "/errorbox"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringBox}
		public Action getRichStringBoxAction_0() { return cRichStringBoxAction_0; }

		//error?="errorbox"
		public Assignment getErrorAssignment_1() { return cErrorAssignment_1; }

		//"errorbox"
		public Keyword getErrorErrorboxKeyword_1_0() { return cErrorErrorboxKeyword_1_0; }

		//"title=" title=STRING
		public Group getGroup_2() { return cGroup_2; }

		//"title="
		public Keyword getTitleKeyword_2_0() { return cTitleKeyword_2_0; }

		//title=STRING
		public Assignment getTitleAssignment_2_1() { return cTitleAssignment_2_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_2_1_0() { return cTitleSTRINGTerminalRuleCall_2_1_0; }

		//small?="small"?
		public Assignment getSmallAssignment_3() { return cSmallAssignment_3; }

		//"small"
		public Keyword getSmallSmallKeyword_3_0() { return cSmallSmallKeyword_3_0; }

		//("orientation=" orientation=MarkupOrientation)?
		public Group getGroup_4() { return cGroup_4; }

		//"orientation="
		public Keyword getOrientationKeyword_4_0() { return cOrientationKeyword_4_0; }

		//orientation=MarkupOrientation
		public Assignment getOrientationAssignment_4_1() { return cOrientationAssignment_4_1; }

		//MarkupOrientation
		public RuleCall getOrientationMarkupOrientationEnumRuleCall_4_1_0() { return cOrientationMarkupOrientationEnumRuleCall_4_1_0; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_5_0() { return cExpressionInternalRichStringParserRuleCall_5_0; }

		//"/errorbox"
		public Keyword getErrorboxKeyword_6() { return cErrorboxKeyword_6; }
	}

	public class RichStringWarningBoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringWarningBox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringBoxAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cWarningAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cWarningWarningboxKeyword_1_0 = (Keyword)cWarningAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTitleKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTitleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cTitleAssignment_2_1.eContents().get(0);
		private final Assignment cSmallAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cSmallSmallKeyword_3_0 = (Keyword)cSmallAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOrientationKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOrientationAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOrientationMarkupOrientationEnumRuleCall_4_1_0 = (RuleCall)cOrientationAssignment_4_1.eContents().get(0);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		private final Keyword cWarningboxKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//RichStringWarningBox returns xbase::XExpression:
		//	{richstring::RichStringBox} warning?="warningbox" ("title=" title=STRING) small?="small"? ("orientation="
		//	orientation=MarkupOrientation)? expression=InternalRichString "/warningbox";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringBox} warning?="warningbox" ("title=" title=STRING) small?="small"? ("orientation="
		//orientation=MarkupOrientation)? expression=InternalRichString "/warningbox"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringBox}
		public Action getRichStringBoxAction_0() { return cRichStringBoxAction_0; }

		//warning?="warningbox"
		public Assignment getWarningAssignment_1() { return cWarningAssignment_1; }

		//"warningbox"
		public Keyword getWarningWarningboxKeyword_1_0() { return cWarningWarningboxKeyword_1_0; }

		//"title=" title=STRING
		public Group getGroup_2() { return cGroup_2; }

		//"title="
		public Keyword getTitleKeyword_2_0() { return cTitleKeyword_2_0; }

		//title=STRING
		public Assignment getTitleAssignment_2_1() { return cTitleAssignment_2_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_2_1_0() { return cTitleSTRINGTerminalRuleCall_2_1_0; }

		//small?="small"?
		public Assignment getSmallAssignment_3() { return cSmallAssignment_3; }

		//"small"
		public Keyword getSmallSmallKeyword_3_0() { return cSmallSmallKeyword_3_0; }

		//("orientation=" orientation=MarkupOrientation)?
		public Group getGroup_4() { return cGroup_4; }

		//"orientation="
		public Keyword getOrientationKeyword_4_0() { return cOrientationKeyword_4_0; }

		//orientation=MarkupOrientation
		public Assignment getOrientationAssignment_4_1() { return cOrientationAssignment_4_1; }

		//MarkupOrientation
		public RuleCall getOrientationMarkupOrientationEnumRuleCall_4_1_0() { return cOrientationMarkupOrientationEnumRuleCall_4_1_0; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_5_0() { return cExpressionInternalRichStringParserRuleCall_5_0; }

		//"/warningbox"
		public Keyword getWarningboxKeyword_6() { return cWarningboxKeyword_6; }
	}

	public class RichStringAbstractsBoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringAbstractsBox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringBoxAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAbstractsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAbstractsAbstractsboxKeyword_1_0 = (Keyword)cAbstractsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTitleKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTitleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cTitleAssignment_2_1.eContents().get(0);
		private final Assignment cSmallAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cSmallSmallKeyword_3_0 = (Keyword)cSmallAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOrientationKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOrientationAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOrientationMarkupOrientationEnumRuleCall_4_1_0 = (RuleCall)cOrientationAssignment_4_1.eContents().get(0);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		private final Keyword cAbstractsboxKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//RichStringAbstractsBox returns xbase::XExpression:
		//	{richstring::RichStringBox} abstracts?="abstractsbox" ("title=" title=STRING) small?="small"? ("orientation="
		//	orientation=MarkupOrientation)? expression=InternalRichString "/abstractsbox";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringBox} abstracts?="abstractsbox" ("title=" title=STRING) small?="small"? ("orientation="
		//orientation=MarkupOrientation)? expression=InternalRichString "/abstractsbox"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringBox}
		public Action getRichStringBoxAction_0() { return cRichStringBoxAction_0; }

		//abstracts?="abstractsbox"
		public Assignment getAbstractsAssignment_1() { return cAbstractsAssignment_1; }

		//"abstractsbox"
		public Keyword getAbstractsAbstractsboxKeyword_1_0() { return cAbstractsAbstractsboxKeyword_1_0; }

		//"title=" title=STRING
		public Group getGroup_2() { return cGroup_2; }

		//"title="
		public Keyword getTitleKeyword_2_0() { return cTitleKeyword_2_0; }

		//title=STRING
		public Assignment getTitleAssignment_2_1() { return cTitleAssignment_2_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_2_1_0() { return cTitleSTRINGTerminalRuleCall_2_1_0; }

		//small?="small"?
		public Assignment getSmallAssignment_3() { return cSmallAssignment_3; }

		//"small"
		public Keyword getSmallSmallKeyword_3_0() { return cSmallSmallKeyword_3_0; }

		//("orientation=" orientation=MarkupOrientation)?
		public Group getGroup_4() { return cGroup_4; }

		//"orientation="
		public Keyword getOrientationKeyword_4_0() { return cOrientationKeyword_4_0; }

		//orientation=MarkupOrientation
		public Assignment getOrientationAssignment_4_1() { return cOrientationAssignment_4_1; }

		//MarkupOrientation
		public RuleCall getOrientationMarkupOrientationEnumRuleCall_4_1_0() { return cOrientationMarkupOrientationEnumRuleCall_4_1_0; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_5_0() { return cExpressionInternalRichStringParserRuleCall_5_0; }

		//"/abstractsbox"
		public Keyword getAbstractsboxKeyword_6() { return cAbstractsboxKeyword_6; }
	}

	public class RichStringChecklistBoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringChecklistBox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringBoxAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cChecklistAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cChecklistChecklistboxKeyword_1_0 = (Keyword)cChecklistAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTitleKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTitleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cTitleAssignment_2_1.eContents().get(0);
		private final Assignment cSmallAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cSmallSmallKeyword_3_0 = (Keyword)cSmallAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOrientationKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOrientationAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOrientationMarkupOrientationEnumRuleCall_4_1_0 = (RuleCall)cOrientationAssignment_4_1.eContents().get(0);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		private final Keyword cChecklistboxKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//RichStringChecklistBox returns xbase::XExpression:
		//	{richstring::RichStringBox} checklist?="checklistbox" ("title=" title=STRING) small?="small"? ("orientation="
		//	orientation=MarkupOrientation)? expression=InternalRichString "/checklistbox";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringBox} checklist?="checklistbox" ("title=" title=STRING) small?="small"? ("orientation="
		//orientation=MarkupOrientation)? expression=InternalRichString "/checklistbox"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringBox}
		public Action getRichStringBoxAction_0() { return cRichStringBoxAction_0; }

		//checklist?="checklistbox"
		public Assignment getChecklistAssignment_1() { return cChecklistAssignment_1; }

		//"checklistbox"
		public Keyword getChecklistChecklistboxKeyword_1_0() { return cChecklistChecklistboxKeyword_1_0; }

		//"title=" title=STRING
		public Group getGroup_2() { return cGroup_2; }

		//"title="
		public Keyword getTitleKeyword_2_0() { return cTitleKeyword_2_0; }

		//title=STRING
		public Assignment getTitleAssignment_2_1() { return cTitleAssignment_2_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_2_1_0() { return cTitleSTRINGTerminalRuleCall_2_1_0; }

		//small?="small"?
		public Assignment getSmallAssignment_3() { return cSmallAssignment_3; }

		//"small"
		public Keyword getSmallSmallKeyword_3_0() { return cSmallSmallKeyword_3_0; }

		//("orientation=" orientation=MarkupOrientation)?
		public Group getGroup_4() { return cGroup_4; }

		//"orientation="
		public Keyword getOrientationKeyword_4_0() { return cOrientationKeyword_4_0; }

		//orientation=MarkupOrientation
		public Assignment getOrientationAssignment_4_1() { return cOrientationAssignment_4_1; }

		//MarkupOrientation
		public RuleCall getOrientationMarkupOrientationEnumRuleCall_4_1_0() { return cOrientationMarkupOrientationEnumRuleCall_4_1_0; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_5_0() { return cExpressionInternalRichStringParserRuleCall_5_0; }

		//"/checklistbox"
		public Keyword getChecklistboxKeyword_6() { return cChecklistboxKeyword_6; }
	}

	public class RichStringBioBoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringBioBox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringBoxAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cBioAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cBioBioboxKeyword_1_0 = (Keyword)cBioAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTitleKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTitleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cTitleAssignment_2_1.eContents().get(0);
		private final Assignment cSmallAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cSmallSmallKeyword_3_0 = (Keyword)cSmallAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOrientationKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOrientationAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOrientationMarkupOrientationEnumRuleCall_4_1_0 = (RuleCall)cOrientationAssignment_4_1.eContents().get(0);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		private final Keyword cBioboxKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//RichStringBioBox returns xbase::XExpression:
		//	{richstring::RichStringBox} bio?="biobox" ("title=" title=STRING) small?="small"? ("orientation="
		//	orientation=MarkupOrientation)? expression=InternalRichString "/biobox";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringBox} bio?="biobox" ("title=" title=STRING) small?="small"? ("orientation="
		//orientation=MarkupOrientation)? expression=InternalRichString "/biobox"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringBox}
		public Action getRichStringBoxAction_0() { return cRichStringBoxAction_0; }

		//bio?="biobox"
		public Assignment getBioAssignment_1() { return cBioAssignment_1; }

		//"biobox"
		public Keyword getBioBioboxKeyword_1_0() { return cBioBioboxKeyword_1_0; }

		//"title=" title=STRING
		public Group getGroup_2() { return cGroup_2; }

		//"title="
		public Keyword getTitleKeyword_2_0() { return cTitleKeyword_2_0; }

		//title=STRING
		public Assignment getTitleAssignment_2_1() { return cTitleAssignment_2_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_2_1_0() { return cTitleSTRINGTerminalRuleCall_2_1_0; }

		//small?="small"?
		public Assignment getSmallAssignment_3() { return cSmallAssignment_3; }

		//"small"
		public Keyword getSmallSmallKeyword_3_0() { return cSmallSmallKeyword_3_0; }

		//("orientation=" orientation=MarkupOrientation)?
		public Group getGroup_4() { return cGroup_4; }

		//"orientation="
		public Keyword getOrientationKeyword_4_0() { return cOrientationKeyword_4_0; }

		//orientation=MarkupOrientation
		public Assignment getOrientationAssignment_4_1() { return cOrientationAssignment_4_1; }

		//MarkupOrientation
		public RuleCall getOrientationMarkupOrientationEnumRuleCall_4_1_0() { return cOrientationMarkupOrientationEnumRuleCall_4_1_0; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_5_0() { return cExpressionInternalRichStringParserRuleCall_5_0; }

		//"/biobox"
		public Keyword getBioboxKeyword_6() { return cBioboxKeyword_6; }
	}

	public class RichStringSideNoteBoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringSideNoteBox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringBoxAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSidenoteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cSidenoteSidenoteboxKeyword_1_0 = (Keyword)cSidenoteAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTitleKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTitleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cTitleAssignment_2_1.eContents().get(0);
		private final Assignment cSmallAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cSmallSmallKeyword_3_0 = (Keyword)cSmallAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOrientationKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOrientationAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOrientationMarkupOrientationEnumRuleCall_4_1_0 = (RuleCall)cOrientationAssignment_4_1.eContents().get(0);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		private final Keyword cSidenoteboxKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//RichStringSideNoteBox returns xbase::XExpression:
		//	{richstring::RichStringBox} sidenote?="sidenotebox" ("title=" title=STRING) small?="small"? ("orientation="
		//	orientation=MarkupOrientation)? expression=InternalRichString "/sidenotebox";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringBox} sidenote?="sidenotebox" ("title=" title=STRING) small?="small"? ("orientation="
		//orientation=MarkupOrientation)? expression=InternalRichString "/sidenotebox"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringBox}
		public Action getRichStringBoxAction_0() { return cRichStringBoxAction_0; }

		//sidenote?="sidenotebox"
		public Assignment getSidenoteAssignment_1() { return cSidenoteAssignment_1; }

		//"sidenotebox"
		public Keyword getSidenoteSidenoteboxKeyword_1_0() { return cSidenoteSidenoteboxKeyword_1_0; }

		//"title=" title=STRING
		public Group getGroup_2() { return cGroup_2; }

		//"title="
		public Keyword getTitleKeyword_2_0() { return cTitleKeyword_2_0; }

		//title=STRING
		public Assignment getTitleAssignment_2_1() { return cTitleAssignment_2_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_2_1_0() { return cTitleSTRINGTerminalRuleCall_2_1_0; }

		//small?="small"?
		public Assignment getSmallAssignment_3() { return cSmallAssignment_3; }

		//"small"
		public Keyword getSmallSmallKeyword_3_0() { return cSmallSmallKeyword_3_0; }

		//("orientation=" orientation=MarkupOrientation)?
		public Group getGroup_4() { return cGroup_4; }

		//"orientation="
		public Keyword getOrientationKeyword_4_0() { return cOrientationKeyword_4_0; }

		//orientation=MarkupOrientation
		public Assignment getOrientationAssignment_4_1() { return cOrientationAssignment_4_1; }

		//MarkupOrientation
		public RuleCall getOrientationMarkupOrientationEnumRuleCall_4_1_0() { return cOrientationMarkupOrientationEnumRuleCall_4_1_0; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_5_0() { return cExpressionInternalRichStringParserRuleCall_5_0; }

		//"/sidenotebox"
		public Keyword getSidenoteboxKeyword_6() { return cSidenoteboxKeyword_6; }
	}

	public class RichStringContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringContainer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringContainerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContainerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSmallAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cSmallSmallKeyword_2_0 = (Keyword)cSmallAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOrientationKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOrientationAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOrientationMarkupOrientationEnumRuleCall_3_1_0 = (RuleCall)cOrientationAssignment_3_1.eContents().get(0);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cContainerKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RichStringContainer returns xbase::XExpression:
		//	{richstring::RichStringContainer} "container" small?="small"? ("orientation=" orientation=MarkupOrientation)?
		//	expression=InternalRichString "/container";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringContainer} "container" small?="small"? ("orientation=" orientation=MarkupOrientation)?
		//expression=InternalRichString "/container"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringContainer}
		public Action getRichStringContainerAction_0() { return cRichStringContainerAction_0; }

		//"container"
		public Keyword getContainerKeyword_1() { return cContainerKeyword_1; }

		//small?="small"?
		public Assignment getSmallAssignment_2() { return cSmallAssignment_2; }

		//"small"
		public Keyword getSmallSmallKeyword_2_0() { return cSmallSmallKeyword_2_0; }

		//("orientation=" orientation=MarkupOrientation)?
		public Group getGroup_3() { return cGroup_3; }

		//"orientation="
		public Keyword getOrientationKeyword_3_0() { return cOrientationKeyword_3_0; }

		//orientation=MarkupOrientation
		public Assignment getOrientationAssignment_3_1() { return cOrientationAssignment_3_1; }

		//MarkupOrientation
		public RuleCall getOrientationMarkupOrientationEnumRuleCall_3_1_0() { return cOrientationMarkupOrientationEnumRuleCall_3_1_0; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_4_0() { return cExpressionInternalRichStringParserRuleCall_4_0; }

		//"/container"
		public Keyword getContainerKeyword_5() { return cContainerKeyword_5; }
	}

	public class RichStringColumnLayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringColumnLayout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringColumnLayoutAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCollayoutKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cCollayoutKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RichStringColumnLayout returns xbase::XExpression:
		//	{richstring::RichStringColumnLayout} "collayout" expression=InternalRichString "/collayout";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringColumnLayout} "collayout" expression=InternalRichString "/collayout"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringColumnLayout}
		public Action getRichStringColumnLayoutAction_0() { return cRichStringColumnLayoutAction_0; }

		//"collayout"
		public Keyword getCollayoutKeyword_1() { return cCollayoutKeyword_1; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_2_0() { return cExpressionInternalRichStringParserRuleCall_2_0; }

		//"/collayout"
		public Keyword getCollayoutKeyword_3() { return cCollayoutKeyword_3; }
	}

	public class RichStringColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringColumn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringColumnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cColumnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cColumnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RichStringColumn returns xbase::XExpression:
		//	{richstring::RichStringColumn} "column" expression=InternalRichString "/column";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringColumn} "column" expression=InternalRichString "/column"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringColumn}
		public Action getRichStringColumnAction_0() { return cRichStringColumnAction_0; }

		//"column"
		public Keyword getColumnKeyword_1() { return cColumnKeyword_1; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_2_0() { return cExpressionInternalRichStringParserRuleCall_2_0; }

		//"/column"
		public Keyword getColumnKeyword_3() { return cColumnKeyword_3; }
	}

	public class RichStringFooterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringFooter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringFooterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFooterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cFooterKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RichStringFooter returns xbase::XExpression:
		//	{richstring::RichStringFooter} "footer" expression=InternalRichString "/footer";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringFooter} "footer" expression=InternalRichString "/footer"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringFooter}
		public Action getRichStringFooterAction_0() { return cRichStringFooterAction_0; }

		//"footer"
		public Keyword getFooterKeyword_1() { return cFooterKeyword_1; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_2_0() { return cExpressionInternalRichStringParserRuleCall_2_0; }

		//"/footer"
		public Keyword getFooterKeyword_3() { return cFooterKeyword_3; }
	}

	public class RichStringHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringHeaderAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHeaderKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cHeaderKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RichStringHeader returns xbase::XExpression:
		//	{richstring::RichStringHeader} "header" expression=InternalRichString "/header";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringHeader} "header" expression=InternalRichString "/header"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringHeader}
		public Action getRichStringHeaderAction_0() { return cRichStringHeaderAction_0; }

		//"header"
		public Keyword getHeaderKeyword_1() { return cHeaderKeyword_1; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_2_0() { return cExpressionInternalRichStringParserRuleCall_2_0; }

		//"/header"
		public Keyword getHeaderKeyword_3() { return cHeaderKeyword_3; }
	}

	public class RichStringIndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringIndex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringIndexAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIndexKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cIndexKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RichStringIndex returns xbase::XExpression:
		//	{richstring::RichStringIndex} "index" expression=InternalRichString "/index";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringIndex} "index" expression=InternalRichString "/index"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringIndex}
		public Action getRichStringIndexAction_0() { return cRichStringIndexAction_0; }

		//"index"
		public Keyword getIndexKeyword_1() { return cIndexKeyword_1; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_2_0() { return cExpressionInternalRichStringParserRuleCall_2_0; }

		//"/index"
		public Keyword getIndexKeyword_3() { return cIndexKeyword_3; }
	}

	public class RichStringIndexElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringIndexElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringIndexElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIndexelementKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRefKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIndexElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cIndexElementIndexElementCrossReference_3_0 = (CrossReference)cIndexElementAssignment_3.eContents().get(0);
		private final RuleCall cIndexElementIndexElementIDTerminalRuleCall_3_0_1 = (RuleCall)cIndexElementIndexElementCrossReference_3_0.eContents().get(1);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionInternalRichStringParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cIndexelementKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RichStringIndexElement returns xbase::XExpression:
		//	{richstring::RichStringIndexElement} "indexelement" "ref=" indexElement=[richstring::IndexElement]
		//	expression=InternalRichString "/indexelement";
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringIndexElement} "indexelement" "ref=" indexElement=[richstring::IndexElement]
		//expression=InternalRichString "/indexelement"
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringIndexElement}
		public Action getRichStringIndexElementAction_0() { return cRichStringIndexElementAction_0; }

		//"indexelement"
		public Keyword getIndexelementKeyword_1() { return cIndexelementKeyword_1; }

		//"ref="
		public Keyword getRefKeyword_2() { return cRefKeyword_2; }

		//indexElement=[richstring::IndexElement]
		public Assignment getIndexElementAssignment_3() { return cIndexElementAssignment_3; }

		//[richstring::IndexElement]
		public CrossReference getIndexElementIndexElementCrossReference_3_0() { return cIndexElementIndexElementCrossReference_3_0; }

		//ID
		public RuleCall getIndexElementIndexElementIDTerminalRuleCall_3_0_1() { return cIndexElementIndexElementIDTerminalRuleCall_3_0_1; }

		//expression=InternalRichString
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//InternalRichString
		public RuleCall getExpressionInternalRichStringParserRuleCall_4_0() { return cExpressionInternalRichStringParserRuleCall_4_0; }

		//"/indexelement"
		public Keyword getIndexelementKeyword_5() { return cIndexelementKeyword_5; }
	}

	public class RichStringElseIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RichStringElseIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRichStringElseIfAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cElseIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIfAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIfXExpressionParserRuleCall_2_0 = (RuleCall)cIfAssignment_2.eContents().get(0);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenInternalRichStringParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		
		//RichStringElseIf returns richstring::RichStringElseIf:
		//	{richstring::RichStringElseIf} "ElseIf" if=XExpression then=InternalRichString;
		public ParserRule getRule() { return rule; }

		//{richstring::RichStringElseIf} "ElseIf" if=XExpression then=InternalRichString
		public Group getGroup() { return cGroup; }

		//{richstring::RichStringElseIf}
		public Action getRichStringElseIfAction_0() { return cRichStringElseIfAction_0; }

		//"ElseIf"
		public Keyword getElseIfKeyword_1() { return cElseIfKeyword_1; }

		//if=XExpression
		public Assignment getIfAssignment_2() { return cIfAssignment_2; }

		//XExpression
		public RuleCall getIfXExpressionParserRuleCall_2_0() { return cIfXExpressionParserRuleCall_2_0; }

		//then=InternalRichString
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }

		//InternalRichString
		public RuleCall getThenInternalRichStringParserRuleCall_3_0() { return cThenInternalRichStringParserRuleCall_3_0; }
	}
	
	
	public class ProvidedTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ProvidedType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cENTITYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cENTITYEntityKeyword_0_0 = (Keyword)cENTITYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDTOEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDTODtoKeyword_1_0 = (Keyword)cDTOEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ProvidedType returns doc::LDocType:
		//	ENTITY="entity" | DTO="dto";
		public EnumRule getRule() { return rule; }

		//ENTITY="entity" | DTO="dto"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ENTITY="entity"
		public EnumLiteralDeclaration getENTITYEnumLiteralDeclaration_0() { return cENTITYEnumLiteralDeclaration_0; }

		//"entity"
		public Keyword getENTITYEntityKeyword_0_0() { return cENTITYEntityKeyword_0_0; }

		//DTO="dto"
		public EnumLiteralDeclaration getDTOEnumLiteralDeclaration_1() { return cDTOEnumLiteralDeclaration_1; }

		//"dto"
		public Keyword getDTODtoKeyword_1_0() { return cDTODtoKeyword_1_0; }
	}

	public class MarkupOrientationElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MarkupOrientation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLEFTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLEFTLeftKeyword_0_0 = (Keyword)cLEFTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNONENoneKeyword_1_0 = (Keyword)cNONEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRIGHTRightKeyword_2_0 = (Keyword)cRIGHTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum MarkupOrientation returns richstring::MarkupOrientation:
		//	LEFT="left" | NONE="none" | RIGHT="right";
		public EnumRule getRule() { return rule; }

		//LEFT="left" | NONE="none" | RIGHT="right"
		public Alternatives getAlternatives() { return cAlternatives; }

		//LEFT="left"
		public EnumLiteralDeclaration getLEFTEnumLiteralDeclaration_0() { return cLEFTEnumLiteralDeclaration_0; }

		//"left"
		public Keyword getLEFTLeftKeyword_0_0() { return cLEFTLeftKeyword_0_0; }

		//NONE="none"
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_1() { return cNONEEnumLiteralDeclaration_1; }

		//"none"
		public Keyword getNONENoneKeyword_1_0() { return cNONENoneKeyword_1_0; }

		//RIGHT="right"
		public EnumLiteralDeclaration getRIGHTEnumLiteralDeclaration_2() { return cRIGHTEnumLiteralDeclaration_2; }

		//"right"
		public Keyword getRIGHTRightKeyword_2_0() { return cRIGHTRightKeyword_2_0; }
	}
	
	private NamedDocumentElements pNamedDocument;
	private DocumentElements pDocument;
	private DocLayouterElements pDocLayouter;
	private DocumentIncludeElements pDocumentInclude;
	private ProvidedTypeElements unknownRuleProvidedType;
	private GeneralDocumentElements pGeneralDocument;
	private EntityDocumentElements pEntityDocument;
	private EntityFieldElements pEntityField;
	private DTODocumentElements pDTODocument;
	private DTOPropertyElements pDTOProperty;
	private BPMProcessDocumentElements pBPMProcessDocument;
	private BPMHumanTaskDocumentElements pBPMHumanTaskDocument;
	private VaaclipseViewDocumentElements pVaaclipseViewDocument;
	private UIDocumentElements pUIDocument;
	private RichStringElements pRichString;
	private RichStringLiteralElements pRichStringLiteral;
	private RichStringLiteralStartElements pRichStringLiteralStart;
	private RichStringLiteralInbetweenElements pRichStringLiteralInbetween;
	private RichStringLiteralEndElements pRichStringLiteralEnd;
	private InternalRichStringElements pInternalRichString;
	private RichStringPartElements pRichStringPart;
	private RichStringExampleElements pRichStringExample;
	private RichStringH1Elements pRichStringH1;
	private RichStringH2Elements pRichStringH2;
	private RichStringH3Elements pRichStringH3;
	private RichStringH4Elements pRichStringH4;
	private RichStringH5Elements pRichStringH5;
	private RichStringH6Elements pRichStringH6;
	private RichStringChapterElements pRichStringChapter;
	private RichStringSectionElements pRichStringSection;
	private RichStringSubsectionElements pRichStringSubsection;
	private RichStringURLElements pRichStringURL;
	private RichStringRefElements pRichStringRef;
	private RichStringMailtoElements pRichStringMailto;
	private RichStringSkypeElements pRichStringSkype;
	private RichStringMovieElements pRichStringMovie;
	private RichStringImgElements pRichStringImg;
	private RichStringBoldElements pRichStringBold;
	private RichStringUnderlineElements pRichStringUnderline;
	private RichStringItalicElements pRichStringItalic;
	private RichStringSpanElements pRichStringSpan;
	private RichStringCodeElements pRichStringCode;
	private RichStringTableElements pRichStringTable;
	private RichStringTableRowElements pRichStringTableRow;
	private RichStringTableCellElements pRichStringTableCell;
	private RichStringListElements pRichStringList;
	private RichStringOrderedListElements pRichStringOrderedList;
	private RichStringListElementElements pRichStringListElement;
	private RichStringOpenViewElements pRichStringOpenView;
	private RichStringStartProcessElements pRichStringStartProcess;
	private RichStringEntityRefElements pRichStringEntityRef;
	private RichStringDTORefElements pRichStringDTORef;
	private RichStringProcessRefElements pRichStringProcessRef;
	private RichStringTaskRefElements pRichStringTaskRef;
	private RichStringViewRefElements pRichStringViewRef;
	private RichStringUIRefElements pRichStringUIRef;
	private RichStringForLoopElements pRichStringForLoop;
	private RichStringIfElements pRichStringIf;
	private MarkupOrientationElements unknownRuleMarkupOrientation;
	private RichStringInfoBoxElements pRichStringInfoBox;
	private RichStringErrorBoxElements pRichStringErrorBox;
	private RichStringWarningBoxElements pRichStringWarningBox;
	private RichStringAbstractsBoxElements pRichStringAbstractsBox;
	private RichStringChecklistBoxElements pRichStringChecklistBox;
	private RichStringBioBoxElements pRichStringBioBox;
	private RichStringSideNoteBoxElements pRichStringSideNoteBox;
	private RichStringContainerElements pRichStringContainer;
	private RichStringColumnLayoutElements pRichStringColumnLayout;
	private RichStringColumnElements pRichStringColumn;
	private RichStringFooterElements pRichStringFooter;
	private RichStringHeaderElements pRichStringHeader;
	private RichStringIndexElements pRichStringIndex;
	private RichStringIndexElementElements pRichStringIndexElement;
	private RichStringElseIfElements pRichStringElseIf;
	private TerminalRule tRICH_TEXT;
	private TerminalRule tRICH_TEXT_START;
	private TerminalRule tRICH_TEXT_END;
	private TerminalRule tRICH_TEXT_INBETWEEN;
	private TerminalRule tCOMMENT_RICH_TEXT_INBETWEEN;
	private TerminalRule tCOMMENT_RICH_TEXT_END;
	private TerminalRule tIN_RICH_STRING;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public LuniferaDocGrammarGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.lunifera.doc.dsl.LuniferaDocGrammar".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//NamedDocument returns doc::LDocNamedDocument:
	//	DocLayouter | Document;
	public NamedDocumentElements getNamedDocumentAccess() {
		return (pNamedDocument != null) ? pNamedDocument : (pNamedDocument = new NamedDocumentElements());
	}
	
	public ParserRule getNamedDocumentRule() {
		return getNamedDocumentAccess().getRule();
	}

	//Document returns doc::LDocDocument:
	//	EntityDocument | DTODocument | BPMProcessDocument | BPMHumanTaskDocument | VaaclipseViewDocument | UIDocument;
	public DocumentElements getDocumentAccess() {
		return (pDocument != null) ? pDocument : (pDocument = new DocumentElements());
	}
	
	public ParserRule getDocumentRule() {
		return getDocumentAccess().getRule();
	}

	//DocLayouter returns doc::LDocLayouter:
	//	GeneralDocument;
	public DocLayouterElements getDocLayouterAccess() {
		return (pDocLayouter != null) ? pDocLayouter : (pDocLayouter = new DocLayouterElements());
	}
	
	public ParserRule getDocLayouterRule() {
		return getDocLayouterAccess().getRule();
	}

	//DocumentInclude returns doc::LDocInclude:
	//	("include" document=[doc::LDocDocument|QualifiedName] "as" varName=ID | provided?="provided"
	//	(providedType=ProvidedType | providedJVMType=JvmTypeReference) "as" varName=ID) ";";
	public DocumentIncludeElements getDocumentIncludeAccess() {
		return (pDocumentInclude != null) ? pDocumentInclude : (pDocumentInclude = new DocumentIncludeElements());
	}
	
	public ParserRule getDocumentIncludeRule() {
		return getDocumentIncludeAccess().getRule();
	}

	//enum ProvidedType returns doc::LDocType:
	//	ENTITY="entity" | DTO="dto";
	public ProvidedTypeElements getProvidedTypeAccess() {
		return (unknownRuleProvidedType != null) ? unknownRuleProvidedType : (unknownRuleProvidedType = new ProvidedTypeElements());
	}
	
	public EnumRule getProvidedTypeRule() {
		return getProvidedTypeAccess().getRule();
	}

	//GeneralDocument returns doc::LDocLayouter:
	//	"Layouter" name=QualifiedName "{" imports+=XImportDeclaration* includes+=DocumentInclude* ("language" language=ID ";")
	//	content=RichString "}";
	public GeneralDocumentElements getGeneralDocumentAccess() {
		return (pGeneralDocument != null) ? pGeneralDocument : (pGeneralDocument = new GeneralDocumentElements());
	}
	
	public ParserRule getGeneralDocumentRule() {
		return getGeneralDocumentAccess().getRule();
	}

	//EntityDocument returns doc::LDocEntityDocument:
	//	"EntityDocument" name=QualifiedName "covers" model=[types::LType|QualifiedName] "{" ("language" language=ID ";")
	//	("description" "{" description=RichString "}")? fields+=EntityField* "}";
	public EntityDocumentElements getEntityDocumentAccess() {
		return (pEntityDocument != null) ? pEntityDocument : (pEntityDocument = new EntityDocumentElements());
	}
	
	public ParserRule getEntityDocumentRule() {
		return getEntityDocumentAccess().getRule();
	}

	//EntityField returns doc::LDocEntityField:
	//	{doc::LDocEntityField} "field" typeField=[types::LFeature] "{" description=RichString? "}";
	public EntityFieldElements getEntityFieldAccess() {
		return (pEntityField != null) ? pEntityField : (pEntityField = new EntityFieldElements());
	}
	
	public ParserRule getEntityFieldRule() {
		return getEntityFieldAccess().getRule();
	}

	//DTODocument returns doc::LDocDtoDocument:
	//	"DTODocument" name=QualifiedName "covers" model=[types::LType|QualifiedName] "{" ("language" language=ID ";")
	//	("description" "{" description=RichString "}")? ("properties" "{" fields+=DTOProperty* "}")? "}";
	public DTODocumentElements getDTODocumentAccess() {
		return (pDTODocument != null) ? pDTODocument : (pDTODocument = new DTODocumentElements());
	}
	
	public ParserRule getDTODocumentRule() {
		return getDTODocumentAccess().getRule();
	}

	//DTOProperty returns doc::LDocDtoProperty:
	//	"name" name=ID ";" "description" "{" description=RichString "}";
	public DTOPropertyElements getDTOPropertyAccess() {
		return (pDTOProperty != null) ? pDTOProperty : (pDTOProperty = new DTOPropertyElements());
	}
	
	public ParserRule getDTOPropertyRule() {
		return getDTOPropertyAccess().getRule();
	}

	//BPMProcessDocument returns doc::LDocBPMProcessDocument:
	//	"BPMProcessDocument" name=QualifiedName "covers" process=STRING "{" ("language" language=ID ";") "description" "{"
	//	description=RichString "}" "}";
	public BPMProcessDocumentElements getBPMProcessDocumentAccess() {
		return (pBPMProcessDocument != null) ? pBPMProcessDocument : (pBPMProcessDocument = new BPMProcessDocumentElements());
	}
	
	public ParserRule getBPMProcessDocumentRule() {
		return getBPMProcessDocumentAccess().getRule();
	}

	//BPMHumanTaskDocument returns doc::LDocHumanTaskDocument:
	//	"BPMHumanTaskDocument" name=QualifiedName "covers" task=STRING "{" ("language" language=ID ";") "description" "{"
	//	description=RichString "}" "}";
	public BPMHumanTaskDocumentElements getBPMHumanTaskDocumentAccess() {
		return (pBPMHumanTaskDocument != null) ? pBPMHumanTaskDocument : (pBPMHumanTaskDocument = new BPMHumanTaskDocumentElements());
	}
	
	public ParserRule getBPMHumanTaskDocumentRule() {
		return getBPMHumanTaskDocumentAccess().getRule();
	}

	//VaaclipseViewDocument returns doc::LDocViewDocument:
	//	"VaaclipseViewDocument" name=QualifiedName "covers" view=STRING "{" ("language" language=ID ";") "description" "{"
	//	description=RichString "}" "}";
	public VaaclipseViewDocumentElements getVaaclipseViewDocumentAccess() {
		return (pVaaclipseViewDocument != null) ? pVaaclipseViewDocument : (pVaaclipseViewDocument = new VaaclipseViewDocumentElements());
	}
	
	public ParserRule getVaaclipseViewDocumentRule() {
		return getVaaclipseViewDocumentAccess().getRule();
	}

	//UIDocument returns doc::LDocUIDocument:
	//	"UIDocument" name=QualifiedName "covers" ui=STRING "{" ("language" language=ID ";") "description" "{"
	//	description=RichString "}" "}";
	public UIDocumentElements getUIDocumentAccess() {
		return (pUIDocument != null) ? pUIDocument : (pUIDocument = new UIDocumentElements());
	}
	
	public ParserRule getUIDocumentRule() {
		return getUIDocumentAccess().getRule();
	}

	//// RichString
	//RichString returns richstring::RichString:
	//	{richstring::RichString} (expressions+=RichStringLiteral | expressions+=RichStringLiteralStart
	//	expressions+=RichStringPart? (expressions+=RichStringLiteralInbetween expressions+=RichStringPart?)*
	//	expressions+=RichStringLiteralEnd);
	public RichStringElements getRichStringAccess() {
		return (pRichString != null) ? pRichString : (pRichString = new RichStringElements());
	}
	
	public ParserRule getRichStringRule() {
		return getRichStringAccess().getRule();
	}

	//RichStringLiteral returns xbase::XExpression:
	//	{richstring::RichStringLiteral} value=RICH_TEXT;
	public RichStringLiteralElements getRichStringLiteralAccess() {
		return (pRichStringLiteral != null) ? pRichStringLiteral : (pRichStringLiteral = new RichStringLiteralElements());
	}
	
	public ParserRule getRichStringLiteralRule() {
		return getRichStringLiteralAccess().getRule();
	}

	//RichStringLiteralStart returns xbase::XExpression:
	//	{richstring::RichStringLiteral} value=RICH_TEXT_START;
	public RichStringLiteralStartElements getRichStringLiteralStartAccess() {
		return (pRichStringLiteralStart != null) ? pRichStringLiteralStart : (pRichStringLiteralStart = new RichStringLiteralStartElements());
	}
	
	public ParserRule getRichStringLiteralStartRule() {
		return getRichStringLiteralStartAccess().getRule();
	}

	//RichStringLiteralInbetween returns xbase::XExpression:
	//	{richstring::RichStringLiteral} (value=RICH_TEXT_INBETWEEN | value=COMMENT_RICH_TEXT_INBETWEEN);
	public RichStringLiteralInbetweenElements getRichStringLiteralInbetweenAccess() {
		return (pRichStringLiteralInbetween != null) ? pRichStringLiteralInbetween : (pRichStringLiteralInbetween = new RichStringLiteralInbetweenElements());
	}
	
	public ParserRule getRichStringLiteralInbetweenRule() {
		return getRichStringLiteralInbetweenAccess().getRule();
	}

	//RichStringLiteralEnd returns xbase::XExpression:
	//	{richstring::RichStringLiteral} (value=RICH_TEXT_END | value=COMMENT_RICH_TEXT_END);
	public RichStringLiteralEndElements getRichStringLiteralEndAccess() {
		return (pRichStringLiteralEnd != null) ? pRichStringLiteralEnd : (pRichStringLiteralEnd = new RichStringLiteralEndElements());
	}
	
	public ParserRule getRichStringLiteralEndRule() {
		return getRichStringLiteralEndAccess().getRule();
	}

	//InternalRichString returns xbase::XExpression:
	//	{richstring::RichString} (expressions+=RichStringLiteralInbetween (expressions+=RichStringPart?
	//	expressions+=RichStringLiteralInbetween)*);
	public InternalRichStringElements getInternalRichStringAccess() {
		return (pInternalRichString != null) ? pInternalRichString : (pInternalRichString = new InternalRichStringElements());
	}
	
	public ParserRule getInternalRichStringRule() {
		return getInternalRichStringAccess().getRule();
	}

	//RichStringPart returns xbase::XExpression:
	//	XExpressionOrVarDeclaration | RichStringForLoop | RichStringIf | RichStringH1 | RichStringH2 | RichStringH3 |
	//	RichStringH4 | RichStringH5 | RichStringH6 | RichStringChapter | RichStringSection | RichStringSubsection |
	//	RichStringExample | RichStringURL | RichStringRef | RichStringMailto | RichStringSkype | RichStringMovie |
	//	RichStringImg | RichStringBold | RichStringUnderline | RichStringItalic | RichStringSpan | RichStringCode |
	//	RichStringTable | RichStringTableRow | RichStringTableCell | RichStringList | RichStringOrderedList |
	//	RichStringListElement | RichStringOpenView | RichStringStartProcess | RichStringEntityRef | RichStringDTORef |
	//	RichStringProcessRef | RichStringTaskRef | RichStringViewRef | RichStringUIRef | RichStringInfoBox |
	//	RichStringErrorBox | RichStringWarningBox | RichStringAbstractsBox | RichStringChecklistBox | RichStringBioBox |
	//	RichStringSideNoteBox | RichStringContainer | RichStringFooter | RichStringHeader | RichStringIndex |
	//	RichStringIndexElement;
	public RichStringPartElements getRichStringPartAccess() {
		return (pRichStringPart != null) ? pRichStringPart : (pRichStringPart = new RichStringPartElements());
	}
	
	public ParserRule getRichStringPartRule() {
		return getRichStringPartAccess().getRule();
	}

	//RichStringExample returns xbase::XExpression:
	//	{richstring::RichStringExample} "example" expression=InternalRichString "/example";
	public RichStringExampleElements getRichStringExampleAccess() {
		return (pRichStringExample != null) ? pRichStringExample : (pRichStringExample = new RichStringExampleElements());
	}
	
	public ParserRule getRichStringExampleRule() {
		return getRichStringExampleAccess().getRule();
	}

	//RichStringH1 returns xbase::XExpression:
	//	{richstring::RichStringH1} "h1" expression=InternalRichString "/h1";
	public RichStringH1Elements getRichStringH1Access() {
		return (pRichStringH1 != null) ? pRichStringH1 : (pRichStringH1 = new RichStringH1Elements());
	}
	
	public ParserRule getRichStringH1Rule() {
		return getRichStringH1Access().getRule();
	}

	//RichStringH2 returns xbase::XExpression:
	//	{richstring::RichStringH2} "h2" expression=InternalRichString "/h2";
	public RichStringH2Elements getRichStringH2Access() {
		return (pRichStringH2 != null) ? pRichStringH2 : (pRichStringH2 = new RichStringH2Elements());
	}
	
	public ParserRule getRichStringH2Rule() {
		return getRichStringH2Access().getRule();
	}

	//RichStringH3 returns xbase::XExpression:
	//	{richstring::RichStringH3} "h3" expression=InternalRichString "/h3";
	public RichStringH3Elements getRichStringH3Access() {
		return (pRichStringH3 != null) ? pRichStringH3 : (pRichStringH3 = new RichStringH3Elements());
	}
	
	public ParserRule getRichStringH3Rule() {
		return getRichStringH3Access().getRule();
	}

	//RichStringH4 returns xbase::XExpression:
	//	{richstring::RichStringH4} "h4" expression=InternalRichString "/h4";
	public RichStringH4Elements getRichStringH4Access() {
		return (pRichStringH4 != null) ? pRichStringH4 : (pRichStringH4 = new RichStringH4Elements());
	}
	
	public ParserRule getRichStringH4Rule() {
		return getRichStringH4Access().getRule();
	}

	//RichStringH5 returns xbase::XExpression:
	//	{richstring::RichStringH5} "h5" expression=InternalRichString "/h5";
	public RichStringH5Elements getRichStringH5Access() {
		return (pRichStringH5 != null) ? pRichStringH5 : (pRichStringH5 = new RichStringH5Elements());
	}
	
	public ParserRule getRichStringH5Rule() {
		return getRichStringH5Access().getRule();
	}

	//RichStringH6 returns xbase::XExpression:
	//	{richstring::RichStringH6} "h6" expression=InternalRichString "/h6";
	public RichStringH6Elements getRichStringH6Access() {
		return (pRichStringH6 != null) ? pRichStringH6 : (pRichStringH6 = new RichStringH6Elements());
	}
	
	public ParserRule getRichStringH6Rule() {
		return getRichStringH6Access().getRule();
	}

	//RichStringChapter returns xbase::XExpression:
	//	{richstring::RichStringChapter} "chapter" name=ValidID expression=InternalRichString "/chapter";
	public RichStringChapterElements getRichStringChapterAccess() {
		return (pRichStringChapter != null) ? pRichStringChapter : (pRichStringChapter = new RichStringChapterElements());
	}
	
	public ParserRule getRichStringChapterRule() {
		return getRichStringChapterAccess().getRule();
	}

	//RichStringSection returns xbase::XExpression:
	//	{richstring::RichStringSection} "section" name=ValidID expression=InternalRichString "/section";
	public RichStringSectionElements getRichStringSectionAccess() {
		return (pRichStringSection != null) ? pRichStringSection : (pRichStringSection = new RichStringSectionElements());
	}
	
	public ParserRule getRichStringSectionRule() {
		return getRichStringSectionAccess().getRule();
	}

	//RichStringSubsection returns xbase::XExpression:
	//	{richstring::RichStringSubsection} "subsection" name=ValidID expression=InternalRichString "/subsection";
	public RichStringSubsectionElements getRichStringSubsectionAccess() {
		return (pRichStringSubsection != null) ? pRichStringSubsection : (pRichStringSubsection = new RichStringSubsectionElements());
	}
	
	public ParserRule getRichStringSubsectionRule() {
		return getRichStringSubsectionAccess().getRule();
	}

	//RichStringURL returns xbase::XExpression:
	//	{richstring::RichStringURL} "url" location=STRING text=InternalRichString "/url";
	public RichStringURLElements getRichStringURLAccess() {
		return (pRichStringURL != null) ? pRichStringURL : (pRichStringURL = new RichStringURLElements());
	}
	
	public ParserRule getRichStringURLRule() {
		return getRichStringURLAccess().getRule();
	}

	//RichStringRef returns xbase::XExpression:
	//	{richstring::RichStringRef} "ref" refId=STRING expression=InternalRichString "/ref";
	public RichStringRefElements getRichStringRefAccess() {
		return (pRichStringRef != null) ? pRichStringRef : (pRichStringRef = new RichStringRefElements());
	}
	
	public ParserRule getRichStringRefRule() {
		return getRichStringRefAccess().getRule();
	}

	//RichStringMailto returns xbase::XExpression:
	//	{richstring::RichStringMailto} "mailto" email=STRING content=InternalRichString "/mailto";
	public RichStringMailtoElements getRichStringMailtoAccess() {
		return (pRichStringMailto != null) ? pRichStringMailto : (pRichStringMailto = new RichStringMailtoElements());
	}
	
	public ParserRule getRichStringMailtoRule() {
		return getRichStringMailtoAccess().getRule();
	}

	//RichStringSkype returns xbase::XExpression:
	//	{richstring::RichStringSkype} "skype" target=STRING content=InternalRichString "/skype";
	public RichStringSkypeElements getRichStringSkypeAccess() {
		return (pRichStringSkype != null) ? pRichStringSkype : (pRichStringSkype = new RichStringSkypeElements());
	}
	
	public ParserRule getRichStringSkypeRule() {
		return getRichStringSkypeAccess().getRule();
	}

	//RichStringMovie returns xbase::XExpression:
	//	{richstring::RichStringMovie} "movie" "src=" src=STRING "type=" type=STRING "width=" width=STRING "height="
	//	height=STRING content=InternalRichString "/movie";
	public RichStringMovieElements getRichStringMovieAccess() {
		return (pRichStringMovie != null) ? pRichStringMovie : (pRichStringMovie = new RichStringMovieElements());
	}
	
	public ParserRule getRichStringMovieRule() {
		return getRichStringMovieAccess().getRule();
	}

	//RichStringImg returns xbase::XExpression:
	//	{richstring::RichStringImg} "img" "src=" src=STRING ("alt=" alt=STRING)? small?="small"? ("orientation="
	//	orientation=MarkupOrientation)? "/";
	public RichStringImgElements getRichStringImgAccess() {
		return (pRichStringImg != null) ? pRichStringImg : (pRichStringImg = new RichStringImgElements());
	}
	
	public ParserRule getRichStringImgRule() {
		return getRichStringImgAccess().getRule();
	}

	//RichStringBold returns xbase::XExpression:
	//	{richstring::RichStringBold} "b" expression=InternalRichString "/b";
	public RichStringBoldElements getRichStringBoldAccess() {
		return (pRichStringBold != null) ? pRichStringBold : (pRichStringBold = new RichStringBoldElements());
	}
	
	public ParserRule getRichStringBoldRule() {
		return getRichStringBoldAccess().getRule();
	}

	//RichStringUnderline returns xbase::XExpression:
	//	{richstring::RichStringUnderline} "u" expression=InternalRichString "/u";
	public RichStringUnderlineElements getRichStringUnderlineAccess() {
		return (pRichStringUnderline != null) ? pRichStringUnderline : (pRichStringUnderline = new RichStringUnderlineElements());
	}
	
	public ParserRule getRichStringUnderlineRule() {
		return getRichStringUnderlineAccess().getRule();
	}

	//RichStringItalic returns xbase::XExpression:
	//	{richstring::RichStringItalic} "i" expression=InternalRichString "/i";
	public RichStringItalicElements getRichStringItalicAccess() {
		return (pRichStringItalic != null) ? pRichStringItalic : (pRichStringItalic = new RichStringItalicElements());
	}
	
	public ParserRule getRichStringItalicRule() {
		return getRichStringItalicAccess().getRule();
	}

	//RichStringSpan returns xbase::XExpression:
	//	{richstring::RichStringSpan} "style" style=STRING expression=InternalRichString "/style";
	public RichStringSpanElements getRichStringSpanAccess() {
		return (pRichStringSpan != null) ? pRichStringSpan : (pRichStringSpan = new RichStringSpanElements());
	}
	
	public ParserRule getRichStringSpanRule() {
		return getRichStringSpanAccess().getRule();
	}

	//RichStringCode returns xbase::XExpression:
	//	{richstring::RichStringCode} "code" ("lang=" lang=STRING)? content=InternalRichString "/code";
	public RichStringCodeElements getRichStringCodeAccess() {
		return (pRichStringCode != null) ? pRichStringCode : (pRichStringCode = new RichStringCodeElements());
	}
	
	public ParserRule getRichStringCodeRule() {
		return getRichStringCodeAccess().getRule();
	}

	//RichStringTable returns xbase::XExpression:
	//	{richstring::RichStringTable} "table" expression=InternalRichString "/table";
	public RichStringTableElements getRichStringTableAccess() {
		return (pRichStringTable != null) ? pRichStringTable : (pRichStringTable = new RichStringTableElements());
	}
	
	public ParserRule getRichStringTableRule() {
		return getRichStringTableAccess().getRule();
	}

	//RichStringTableRow returns richstring::RichStringTableRow:
	//	{richstring::RichStringTableRow} "row" expression=InternalRichString "/row";
	public RichStringTableRowElements getRichStringTableRowAccess() {
		return (pRichStringTableRow != null) ? pRichStringTableRow : (pRichStringTableRow = new RichStringTableRowElements());
	}
	
	public ParserRule getRichStringTableRowRule() {
		return getRichStringTableRowAccess().getRule();
	}

	//RichStringTableCell returns xbase::XExpression:
	//	{richstring::RichStringTableCell} "cell" expression=InternalRichString "/cell";
	public RichStringTableCellElements getRichStringTableCellAccess() {
		return (pRichStringTableCell != null) ? pRichStringTableCell : (pRichStringTableCell = new RichStringTableCellElements());
	}
	
	public ParserRule getRichStringTableCellRule() {
		return getRichStringTableCellAccess().getRule();
	}

	//RichStringList returns xbase::XExpression:
	//	{richstring::RichStringList} "ul" expression=InternalRichString "/ul";
	public RichStringListElements getRichStringListAccess() {
		return (pRichStringList != null) ? pRichStringList : (pRichStringList = new RichStringListElements());
	}
	
	public ParserRule getRichStringListRule() {
		return getRichStringListAccess().getRule();
	}

	//RichStringOrderedList returns xbase::XExpression:
	//	{richstring::RichStringOrderedList} "ol" expression=InternalRichString "/ol";
	public RichStringOrderedListElements getRichStringOrderedListAccess() {
		return (pRichStringOrderedList != null) ? pRichStringOrderedList : (pRichStringOrderedList = new RichStringOrderedListElements());
	}
	
	public ParserRule getRichStringOrderedListRule() {
		return getRichStringOrderedListAccess().getRule();
	}

	//RichStringListElement returns richstring::RichStringListElement:
	//	{richstring::RichStringListElement} "li" expression=InternalRichString "/li";
	public RichStringListElementElements getRichStringListElementAccess() {
		return (pRichStringListElement != null) ? pRichStringListElement : (pRichStringListElement = new RichStringListElementElements());
	}
	
	public ParserRule getRichStringListElementRule() {
		return getRichStringListElementAccess().getRule();
	}

	//RichStringOpenView returns xbase::XExpression:
	//	{richstring::RichStringOpenView} "openview" viewId=STRING expression=InternalRichString "/openview";
	public RichStringOpenViewElements getRichStringOpenViewAccess() {
		return (pRichStringOpenView != null) ? pRichStringOpenView : (pRichStringOpenView = new RichStringOpenViewElements());
	}
	
	public ParserRule getRichStringOpenViewRule() {
		return getRichStringOpenViewAccess().getRule();
	}

	//RichStringStartProcess returns xbase::XExpression:
	//	{richstring::RichStringStartProcess} "startprocess" processId=STRING expression=InternalRichString "/startprocess";
	public RichStringStartProcessElements getRichStringStartProcessAccess() {
		return (pRichStringStartProcess != null) ? pRichStringStartProcess : (pRichStringStartProcess = new RichStringStartProcessElements());
	}
	
	public ParserRule getRichStringStartProcessRule() {
		return getRichStringStartProcessAccess().getRule();
	}

	//RichStringEntityRef returns xbase::XExpression:
	//	{richstring::RichStringEntityRef} "entity-ref" entityDoc=[doc::LDocEntityDocument|QualifiedName]
	//	expression=InternalRichString "/entity-ref";
	public RichStringEntityRefElements getRichStringEntityRefAccess() {
		return (pRichStringEntityRef != null) ? pRichStringEntityRef : (pRichStringEntityRef = new RichStringEntityRefElements());
	}
	
	public ParserRule getRichStringEntityRefRule() {
		return getRichStringEntityRefAccess().getRule();
	}

	//RichStringDTORef returns xbase::XExpression:
	//	{richstring::RichStringDTORef} "dto-ref" dtoDoc=[doc::LDocDtoDocument|QualifiedName] expression=InternalRichString
	//	"/dto-ref";
	public RichStringDTORefElements getRichStringDTORefAccess() {
		return (pRichStringDTORef != null) ? pRichStringDTORef : (pRichStringDTORef = new RichStringDTORefElements());
	}
	
	public ParserRule getRichStringDTORefRule() {
		return getRichStringDTORefAccess().getRule();
	}

	//RichStringProcessRef returns xbase::XExpression:
	//	{richstring::RichStringProcessRef} "process-ref" bpmDoc=[doc::LDocBPMProcessDocument|QualifiedName]
	//	expression=InternalRichString "/process-ref";
	public RichStringProcessRefElements getRichStringProcessRefAccess() {
		return (pRichStringProcessRef != null) ? pRichStringProcessRef : (pRichStringProcessRef = new RichStringProcessRefElements());
	}
	
	public ParserRule getRichStringProcessRefRule() {
		return getRichStringProcessRefAccess().getRule();
	}

	//RichStringTaskRef returns xbase::XExpression:
	//	{richstring::RichStringTaskRef} "task-ref" taskDoc=[doc::LDocHumanTaskDocument|QualifiedName]
	//	expression=InternalRichString "/task-ref";
	public RichStringTaskRefElements getRichStringTaskRefAccess() {
		return (pRichStringTaskRef != null) ? pRichStringTaskRef : (pRichStringTaskRef = new RichStringTaskRefElements());
	}
	
	public ParserRule getRichStringTaskRefRule() {
		return getRichStringTaskRefAccess().getRule();
	}

	//RichStringViewRef returns xbase::XExpression:
	//	{richstring::RichStringViewRef} "view-ref" viewDoc=[doc::LDocViewDocument|QualifiedName] expression=InternalRichString
	//	"/view-ref";
	public RichStringViewRefElements getRichStringViewRefAccess() {
		return (pRichStringViewRef != null) ? pRichStringViewRef : (pRichStringViewRef = new RichStringViewRefElements());
	}
	
	public ParserRule getRichStringViewRefRule() {
		return getRichStringViewRefAccess().getRule();
	}

	//RichStringUIRef returns xbase::XExpression:
	//	{richstring::RichStringUIRef} "ui-ref" uiDoc=[doc::LDocUIDocument|QualifiedName] expression=InternalRichString
	//	"/ui-ref";
	public RichStringUIRefElements getRichStringUIRefAccess() {
		return (pRichStringUIRef != null) ? pRichStringUIRef : (pRichStringUIRef = new RichStringUIRefElements());
	}
	
	public ParserRule getRichStringUIRefRule() {
		return getRichStringUIRefAccess().getRule();
	}

	//RichStringForLoop returns xbase::XExpression:
	//	{richstring::RichStringForLoop} "For" declaredParam=JvmFormalParameter ":" forExpression=XExpression ("Before"
	//	before=XExpression)? ("Separator" separator=XExpression)? ("After" after=XExpression)?
	//	eachExpression=InternalRichString "Endfor";
	public RichStringForLoopElements getRichStringForLoopAccess() {
		return (pRichStringForLoop != null) ? pRichStringForLoop : (pRichStringForLoop = new RichStringForLoopElements());
	}
	
	public ParserRule getRichStringForLoopRule() {
		return getRichStringForLoopAccess().getRule();
	}

	//RichStringIf returns xbase::XExpression:
	//	{richstring::RichStringIf} "If" if=XExpression then=InternalRichString elseIfs+=RichStringElseIf* ("Else"
	//	else=InternalRichString)? "EndIf";
	public RichStringIfElements getRichStringIfAccess() {
		return (pRichStringIf != null) ? pRichStringIf : (pRichStringIf = new RichStringIfElements());
	}
	
	public ParserRule getRichStringIfRule() {
		return getRichStringIfAccess().getRule();
	}

	//enum MarkupOrientation returns richstring::MarkupOrientation:
	//	LEFT="left" | NONE="none" | RIGHT="right";
	public MarkupOrientationElements getMarkupOrientationAccess() {
		return (unknownRuleMarkupOrientation != null) ? unknownRuleMarkupOrientation : (unknownRuleMarkupOrientation = new MarkupOrientationElements());
	}
	
	public EnumRule getMarkupOrientationRule() {
		return getMarkupOrientationAccess().getRule();
	}

	//RichStringInfoBox returns xbase::XExpression:
	//	{richstring::RichStringBox} info?="infobox" ("title=" title=STRING) small?="small"? ("orientation="
	//	orientation=MarkupOrientation)? expression=InternalRichString "/infobox";
	public RichStringInfoBoxElements getRichStringInfoBoxAccess() {
		return (pRichStringInfoBox != null) ? pRichStringInfoBox : (pRichStringInfoBox = new RichStringInfoBoxElements());
	}
	
	public ParserRule getRichStringInfoBoxRule() {
		return getRichStringInfoBoxAccess().getRule();
	}

	//RichStringErrorBox returns xbase::XExpression:
	//	{richstring::RichStringBox} error?="errorbox" ("title=" title=STRING) small?="small"? ("orientation="
	//	orientation=MarkupOrientation)? expression=InternalRichString "/errorbox";
	public RichStringErrorBoxElements getRichStringErrorBoxAccess() {
		return (pRichStringErrorBox != null) ? pRichStringErrorBox : (pRichStringErrorBox = new RichStringErrorBoxElements());
	}
	
	public ParserRule getRichStringErrorBoxRule() {
		return getRichStringErrorBoxAccess().getRule();
	}

	//RichStringWarningBox returns xbase::XExpression:
	//	{richstring::RichStringBox} warning?="warningbox" ("title=" title=STRING) small?="small"? ("orientation="
	//	orientation=MarkupOrientation)? expression=InternalRichString "/warningbox";
	public RichStringWarningBoxElements getRichStringWarningBoxAccess() {
		return (pRichStringWarningBox != null) ? pRichStringWarningBox : (pRichStringWarningBox = new RichStringWarningBoxElements());
	}
	
	public ParserRule getRichStringWarningBoxRule() {
		return getRichStringWarningBoxAccess().getRule();
	}

	//RichStringAbstractsBox returns xbase::XExpression:
	//	{richstring::RichStringBox} abstracts?="abstractsbox" ("title=" title=STRING) small?="small"? ("orientation="
	//	orientation=MarkupOrientation)? expression=InternalRichString "/abstractsbox";
	public RichStringAbstractsBoxElements getRichStringAbstractsBoxAccess() {
		return (pRichStringAbstractsBox != null) ? pRichStringAbstractsBox : (pRichStringAbstractsBox = new RichStringAbstractsBoxElements());
	}
	
	public ParserRule getRichStringAbstractsBoxRule() {
		return getRichStringAbstractsBoxAccess().getRule();
	}

	//RichStringChecklistBox returns xbase::XExpression:
	//	{richstring::RichStringBox} checklist?="checklistbox" ("title=" title=STRING) small?="small"? ("orientation="
	//	orientation=MarkupOrientation)? expression=InternalRichString "/checklistbox";
	public RichStringChecklistBoxElements getRichStringChecklistBoxAccess() {
		return (pRichStringChecklistBox != null) ? pRichStringChecklistBox : (pRichStringChecklistBox = new RichStringChecklistBoxElements());
	}
	
	public ParserRule getRichStringChecklistBoxRule() {
		return getRichStringChecklistBoxAccess().getRule();
	}

	//RichStringBioBox returns xbase::XExpression:
	//	{richstring::RichStringBox} bio?="biobox" ("title=" title=STRING) small?="small"? ("orientation="
	//	orientation=MarkupOrientation)? expression=InternalRichString "/biobox";
	public RichStringBioBoxElements getRichStringBioBoxAccess() {
		return (pRichStringBioBox != null) ? pRichStringBioBox : (pRichStringBioBox = new RichStringBioBoxElements());
	}
	
	public ParserRule getRichStringBioBoxRule() {
		return getRichStringBioBoxAccess().getRule();
	}

	//RichStringSideNoteBox returns xbase::XExpression:
	//	{richstring::RichStringBox} sidenote?="sidenotebox" ("title=" title=STRING) small?="small"? ("orientation="
	//	orientation=MarkupOrientation)? expression=InternalRichString "/sidenotebox";
	public RichStringSideNoteBoxElements getRichStringSideNoteBoxAccess() {
		return (pRichStringSideNoteBox != null) ? pRichStringSideNoteBox : (pRichStringSideNoteBox = new RichStringSideNoteBoxElements());
	}
	
	public ParserRule getRichStringSideNoteBoxRule() {
		return getRichStringSideNoteBoxAccess().getRule();
	}

	//RichStringContainer returns xbase::XExpression:
	//	{richstring::RichStringContainer} "container" small?="small"? ("orientation=" orientation=MarkupOrientation)?
	//	expression=InternalRichString "/container";
	public RichStringContainerElements getRichStringContainerAccess() {
		return (pRichStringContainer != null) ? pRichStringContainer : (pRichStringContainer = new RichStringContainerElements());
	}
	
	public ParserRule getRichStringContainerRule() {
		return getRichStringContainerAccess().getRule();
	}

	//RichStringColumnLayout returns xbase::XExpression:
	//	{richstring::RichStringColumnLayout} "collayout" expression=InternalRichString "/collayout";
	public RichStringColumnLayoutElements getRichStringColumnLayoutAccess() {
		return (pRichStringColumnLayout != null) ? pRichStringColumnLayout : (pRichStringColumnLayout = new RichStringColumnLayoutElements());
	}
	
	public ParserRule getRichStringColumnLayoutRule() {
		return getRichStringColumnLayoutAccess().getRule();
	}

	//RichStringColumn returns xbase::XExpression:
	//	{richstring::RichStringColumn} "column" expression=InternalRichString "/column";
	public RichStringColumnElements getRichStringColumnAccess() {
		return (pRichStringColumn != null) ? pRichStringColumn : (pRichStringColumn = new RichStringColumnElements());
	}
	
	public ParserRule getRichStringColumnRule() {
		return getRichStringColumnAccess().getRule();
	}

	//RichStringFooter returns xbase::XExpression:
	//	{richstring::RichStringFooter} "footer" expression=InternalRichString "/footer";
	public RichStringFooterElements getRichStringFooterAccess() {
		return (pRichStringFooter != null) ? pRichStringFooter : (pRichStringFooter = new RichStringFooterElements());
	}
	
	public ParserRule getRichStringFooterRule() {
		return getRichStringFooterAccess().getRule();
	}

	//RichStringHeader returns xbase::XExpression:
	//	{richstring::RichStringHeader} "header" expression=InternalRichString "/header";
	public RichStringHeaderElements getRichStringHeaderAccess() {
		return (pRichStringHeader != null) ? pRichStringHeader : (pRichStringHeader = new RichStringHeaderElements());
	}
	
	public ParserRule getRichStringHeaderRule() {
		return getRichStringHeaderAccess().getRule();
	}

	//RichStringIndex returns xbase::XExpression:
	//	{richstring::RichStringIndex} "index" expression=InternalRichString "/index";
	public RichStringIndexElements getRichStringIndexAccess() {
		return (pRichStringIndex != null) ? pRichStringIndex : (pRichStringIndex = new RichStringIndexElements());
	}
	
	public ParserRule getRichStringIndexRule() {
		return getRichStringIndexAccess().getRule();
	}

	//RichStringIndexElement returns xbase::XExpression:
	//	{richstring::RichStringIndexElement} "indexelement" "ref=" indexElement=[richstring::IndexElement]
	//	expression=InternalRichString "/indexelement";
	public RichStringIndexElementElements getRichStringIndexElementAccess() {
		return (pRichStringIndexElement != null) ? pRichStringIndexElement : (pRichStringIndexElement = new RichStringIndexElementElements());
	}
	
	public ParserRule getRichStringIndexElementRule() {
		return getRichStringIndexElementAccess().getRule();
	}

	//RichStringElseIf returns richstring::RichStringElseIf:
	//	{richstring::RichStringElseIf} "ElseIf" if=XExpression then=InternalRichString;
	public RichStringElseIfElements getRichStringElseIfAccess() {
		return (pRichStringElseIf != null) ? pRichStringElseIf : (pRichStringElseIf = new RichStringElseIfElements());
	}
	
	public ParserRule getRichStringElseIfRule() {
		return getRichStringElseIfAccess().getRule();
	}

	//terminal RICH_TEXT:
	//	"\'\'\'" IN_RICH_STRING* ("\'\'\'" | ("\'" "\'"?)? EOF);
	public TerminalRule getRICH_TEXTRule() {
		return (tRICH_TEXT != null) ? tRICH_TEXT : (tRICH_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RICH_TEXT"));
	} 

	//terminal RICH_TEXT_START:
	//	"\'\'\'" IN_RICH_STRING* ("\'" "\'"?)? "«";
	public TerminalRule getRICH_TEXT_STARTRule() {
		return (tRICH_TEXT_START != null) ? tRICH_TEXT_START : (tRICH_TEXT_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RICH_TEXT_START"));
	} 

	//terminal RICH_TEXT_END:
	//	"»" IN_RICH_STRING* ("\'\'\'" | ("\'" "\'"?)? EOF);
	public TerminalRule getRICH_TEXT_ENDRule() {
		return (tRICH_TEXT_END != null) ? tRICH_TEXT_END : (tRICH_TEXT_END = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RICH_TEXT_END"));
	} 

	//terminal RICH_TEXT_INBETWEEN:
	//	"»" IN_RICH_STRING* ("\'" "\'"?)? "«";
	public TerminalRule getRICH_TEXT_INBETWEENRule() {
		return (tRICH_TEXT_INBETWEEN != null) ? tRICH_TEXT_INBETWEEN : (tRICH_TEXT_INBETWEEN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RICH_TEXT_INBETWEEN"));
	} 

	//terminal COMMENT_RICH_TEXT_INBETWEEN:
	//	"««" !("\n" | "\r")* ("\r"? "\n" IN_RICH_STRING* ("\'" "\'"?)? "«")?;
	public TerminalRule getCOMMENT_RICH_TEXT_INBETWEENRule() {
		return (tCOMMENT_RICH_TEXT_INBETWEEN != null) ? tCOMMENT_RICH_TEXT_INBETWEEN : (tCOMMENT_RICH_TEXT_INBETWEEN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMENT_RICH_TEXT_INBETWEEN"));
	} 

	//terminal COMMENT_RICH_TEXT_END:
	//	"««" !("\n" | "\r")* ("\r"? "\n" IN_RICH_STRING* ("\'\'\'" | ("\'" "\'"?)? EOF) | EOF);
	public TerminalRule getCOMMENT_RICH_TEXT_ENDRule() {
		return (tCOMMENT_RICH_TEXT_END != null) ? tCOMMENT_RICH_TEXT_END : (tCOMMENT_RICH_TEXT_END = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMENT_RICH_TEXT_END"));
	} 

	//terminal fragment IN_RICH_STRING:
	//	"\'\'" !("«" | "\'") | "\'" !("«" | "\'") | !("«" | "\'");
	public TerminalRule getIN_RICH_STRINGRule() {
		return (tIN_RICH_STRING != null) ? tIN_RICH_STRING : (tIN_RICH_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IN_RICH_STRING"));
	} 

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":" default=XExpression)?
	//	"}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | ",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbase.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}

/*******************************************************************************
 * Copyright (c) 2013 Loetz KG (Heidelberg), Lunifera GmbH (Gro√ü Enzersdorf) and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 ******************************************************************************/
module org.lunifera.doc.dsl.GenerateLuniferaDocGrammar

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var fileExtensions = "docu"
var projectName = "org.lunifera.doc.dsl"
var grammarURI = "platform:/resource/${projectName}/src/org/lunifera/doc/dsl/LuniferaDocGrammar.xtext"
var runtimeProject = "../${projectName}"
var generateXtendStub = true

Workflow {

	bean = org.eclipse.emf.ecore.xcore.XcoreStandaloneSetup : xcore {}

	bean = org.eclipse.xtext.mwe.Reader {
		register = xcore
	}

	bean = StandaloneSetup {
		scanClassPath = true
		platformUri = "${runtimeProject}/.."
		registerGenModelFile = "platform:/resource/org.lunifera.dsl.semantic.entity/model/entity.xcore"
		registerGeneratedEPackage = "org.lunifera.dsl.semantic.entity.LunEntityPackage"
		registerGenModelFile = "platform:/resource/org.lunifera.dsl.semantic.common/model/types.xcore"
		registerGeneratedEPackage = "org.lunifera.dsl.semantic.common.types.LunTypesPackage"
		registerGenModelFile = "platform:/resource/org.lunifera.doc.dsl.semantic/model/luniferadoc.genmodel"
		registerGeneratedEPackage = "org.lunifera.doc.dsl.luniferadoc.LunDocPackage"
		registerGeneratedEPackage = "org.lunifera.doc.dsl.luniferadoc.richstring.LunDocRichstringPackage"
		registerGenModelFile = "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel"
		registerEcoreFile = "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.ecore"
		registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
		registerEcoreFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xtype.ecore"
		registerEcoreFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.ecore"
		registerEcoreFile = "platform:/resource/org.eclipse.xtext.xbase/model/XAnnotations.ecore"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.tests/src-gen"
	}

	component = Generator {
		encoding="UTF-8"
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		pathTestProject = "${runtimeProject}.tests"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		language = auto-inject {
			uri = grammarURI
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}

			// serializer 2.0
			fragment = serializer.SerializerFragment auto-inject {
				generateStub = false
			}

			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment auto-inject {}

			// The antlr parser generator fragment.
			fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {
				options = {
					classSplitting = true
					fieldsPerClass = "150"
					methodsPerClass = "300"
				}
			}

			// Xtend-based API for validation
			fragment = validation.ValidatorFragment auto-inject {
			//    composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
			//    composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}

			// old scoping and exporting API
			// fragment = scoping.ImportURIScopingFragment auto-inject {}
			// fragment = exporting.SimpleNamesFragment auto-inject {}

			// scoping and exporting API
			fragment = scoping.ImportNamespacesScopingFragment auto-inject {}
			fragment = exporting.QualifiedNamesFragment auto-inject {}
			fragment = builder.BuilderIntegrationFragment auto-inject {}

			// generator API
			fragment = generator.GeneratorFragment auto-inject {}

			// formatter API
			//    		fragment = formatting.FormatterFragment auto-inject {}

			// labeling API
			fragment = labeling.LabelProviderFragment auto-inject {}

			// outline API
			fragment = outline.OutlineTreeProviderFragment auto-inject {}
			fragment = outline.QuickOutlineFragment auto-inject {}

			// quickfix API
			fragment = quickfix.QuickfixProviderFragment auto-inject {}

			// content assist API
			//fragment = contentAssist.JavaBasedContentAssistFragment auto-inject {}
			fragment = contentAssist.ContentAssistFragment auto-inject {}

			// generates a more lightweight Antlr parser and lexer tailored for content assist
			fragment = parser.antlr.XtextAntlrUiGeneratorFragment auto-inject {
				options = {
				// backtrack = true
					classSplitting = true
					fieldsPerClass = "100"
					methodsPerClass = "200"
				}
			}

			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.Junit4Fragment auto-inject {}

			// project wizard (optional)
			// fragment = projectWizard.SimpleProjectWizardFragment auto-inject {
			//      generatorProjectName = "${projectName}"
			// }

			// rename refactoring
			fragment = refactoring.RefactorElementNameFragment auto-inject {}

			// provides the necessary bindings for java types integration
			fragment = types.TypesGeneratorFragment auto-inject {}

			// generates the required bindings only if the grammar inherits from Xbase
			fragment = xbase.XbaseGeneratorFragment auto-inject {}

			// provides a preference page for template proposals
			fragment = templates.CodetemplatesGeneratorFragment auto-inject {}

			// provides a compare view
			fragment = compare.CompareFragment auto-inject {}
		}
	}
}


/*******************************************************************************
 * Copyright (c) 2013 Loetz KG (Heidelberg), Petra Bierleutgeb and others. All rights reserved. This program and the
 * accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this
 * distribution, and is available at http://www.eclipse.org/legal/epl-v10.html
 ******************************************************************************/

/*
 * generated by Xtext
 */
package org.lunifera.doc.dsl;

import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.xbase.compiler.XbaseCompiler;
import org.eclipse.xtext.xbase.formatting.IBasicFormatter;
import org.eclipse.xtext.xbase.formatting.IFormattingPreferenceValuesProvider;
import org.eclipse.xtext.xbase.util.XExpressionHelper;
import org.lunifera.doc.dsl.conversion.LuniferaDocValueConverterService;
import org.lunifera.doc.dsl.formatting.FormatterPreferenceValuesProvider;
import org.lunifera.doc.dsl.formatting.LuniferaDocGrammarFormatter;
import org.lunifera.doc.dsl.jvmmodel.LuniferaJvmModelGenerator;
import org.lunifera.doc.dsl.richstring.LuniferaDocCompiler;
import org.lunifera.doc.dsl.scope.LDocImportedNamespaceAwareLocalScopeProvider;
import org.lunifera.doc.dsl.scope.LDocScopeProvider;
import org.lunifera.doc.dsl.typing.LuniferaDocExpressionHelper;
import org.lunifera.doc.dsl.typing.LuniferaDocTypeComputer;
import org.lunifera.doc.dsl.valueconverter.LDocQualifiedNameProvider;

import com.google.inject.Binder;
import com.google.inject.name.Names;

/**
 * Use this class to register components to be used at runtime / without the
 * Equinox extension registry.
 */
public class LuniferaDocGrammarRuntimeModule extends
		org.lunifera.doc.dsl.AbstractLuniferaDocGrammarRuntimeModule {

	public Class<? extends XExpressionHelper> bindXExpressionHelper() {
		return LuniferaDocExpressionHelper.class;
	}

	public Class<? extends org.eclipse.xtext.xbase.typesystem.computation.ITypeComputer> bindITypeComputer() {
		return LuniferaDocTypeComputer.class;
	}

	public Class<? extends XbaseCompiler> bindXbaseCompiler() {
		return LuniferaDocCompiler.class;
	}

	@Override
	public Class<? extends IValueConverterService> bindIValueConverterService() {
		return LuniferaDocValueConverterService.class;
	}

	public Class<? extends org.eclipse.xtext.naming.IQualifiedNameProvider> bindIQualifiedNameProvider() {
		return LDocQualifiedNameProvider.class;
	}

	@Override
	public Class<? extends IScopeProvider> bindIScopeProvider() {
		return LDocScopeProvider.class;
	}

	@Override
	public void configureIScopeProviderDelegate(Binder binder) {
		binder.bind(IScopeProvider.class)
				.annotatedWith(
						Names.named("org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider.delegate"))
				.to(LDocImportedNamespaceAwareLocalScopeProvider.class);
	}

	@SuppressWarnings("restriction")
	public Class<? extends IBasicFormatter> bindIBasicFormatter() {
		return LuniferaDocGrammarFormatter.class;
	}

	public Class<? extends IFormattingPreferenceValuesProvider> bindIFormattingPreferenceValuesProvider() {
		return FormatterPreferenceValuesProvider.class;
	}

	public Class<? extends org.eclipse.xtext.generator.IGenerator> bindIGenerator() {
		return LuniferaJvmModelGenerator.class;
	}

}

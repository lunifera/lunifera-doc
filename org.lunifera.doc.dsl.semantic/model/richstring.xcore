@GenModel(fileExtensions="richstring")
@GenModel(modelName="LDocRichstring")
@GenModel(prefix="LDocRichstring")
@GenModel(operationReflection="false")
@Ecore(nsURI="http://www.lunifera.org/documentation/richstring/v1")
@Ecore(nsPrefix="richstring")
@Ecore(rootPackage="richstring")
package org.lunifera.doc.dsl.luniferadoc.richstring

import org.eclipse.xtext.xbase.XExpression
import org.eclipse.xtext.xbase.XStringLiteral
import org.eclipse.xtext.xbase.XBlockExpression
import org.eclipse.xtext.xbase.XForLoopExpression
import org.lunifera.doc.dsl.luniferadoc.LDocEntityDocument
import org.lunifera.doc.dsl.luniferadoc.LDocDtoDocument
import org.lunifera.doc.dsl.luniferadoc.LDocHumanTaskDocument
import org.lunifera.doc.dsl.luniferadoc.LDocViewDocument
import org.lunifera.doc.dsl.luniferadoc.LDocUIDocument
import org.lunifera.doc.dsl.luniferadoc.LDocBPMProcessDocument

class RichString extends XBlockExpression {
}

/**
 * An If-expression
 */
class RichStringIf extends XExpression {
	contains XExpression ^if
	contains XExpression then
	contains RichStringElseIf[*] elseIfs
	contains XExpression ^else
}

/**
 * The Else-If-Part of an If-Expression
 */
class RichStringElseIf extends XExpression {
	contains XExpression ^if
	contains XExpression then
}

class RichStringLiteral extends XStringLiteral {
}

class RichStringForLoop extends XForLoopExpression {
	contains XExpression before
	contains XExpression separator
	contains XExpression after
}

/**
 * The super class for all markup elements
 */
abstract class RichStringMarkup extends XExpression {
	String ^id
	String style
	boolean small
	MarkupOrientation orientation
	contains XExpression expression
}

enum MarkupOrientation {
	LEFT, NONE, RIGHT
}

/**
 * A markup to define examples
 */
class RichStringExample extends RichStringMarkup {
}

/**
 * A Header 1 markup
 */
class RichStringH1 extends RichStringMarkup {
}

/**
 * A Header 2 markup
 */
class RichStringH2 extends RichStringMarkup {
}

/**
 * A Header 3 markup
 */
class RichStringH3 extends RichStringMarkup {
}

/**
 * A Header 4 markup
 */
class RichStringH4 extends RichStringMarkup {
}

/**
 * A Header 5 markup
 */
class RichStringH5 extends RichStringMarkup {
}

/**
 * A Header 6 markup
 */
class RichStringH6 extends RichStringMarkup {
}

interface IndexElement {
	
}

/**
 * Defines a chapter in the document
 */
class RichStringChapter extends RichStringMarkup, IndexElement {
	String[1] name
}

/**
 * Defines a section in the document
 */
class RichStringSection extends RichStringMarkup, IndexElement {
	String[1] name
}

/**
 * Defines a subsection in the document
 */
class RichStringSubsection extends RichStringMarkup, IndexElement {
	String[1] name
}

/**
 * Defines a URL
 */
class RichStringURL extends RichStringMarkup {
	String[1] location
	contains XExpression text
}

/**
 * Defines a reference
 */
class RichStringRef extends RichStringMarkup {
	String refId
}

/**
 * A Bold markup
 */
class RichStringBold extends RichStringMarkup {
}

/**
 * An undlerine markup
 */
class RichStringUnderline extends RichStringMarkup {
}

/**
 * An italic markup
 */
class RichStringItalic extends RichStringMarkup {
}

/**
 * An image markup
 */
class RichStringImg extends RichStringMarkup {
	String[1] src
	String alt
}

/**
 * A mailTo markup
 */
class RichStringMailto extends RichStringMarkup {
	String[1] email
	contains XExpression content
}

/**
 * A skype markup
 */
class RichStringSkype extends RichStringMarkup {
	String[1] target
	contains XExpression content
}

/**
 * A movie markup
 */
class RichStringMovie extends RichStringMarkup {
	String[1] src
	String[1] width
	String[1] height
	String[1] ^type
	contains XExpression content
}

/**
 * A code markup
 */
class RichStringCode extends RichStringMarkup {
	String lang
	contains XExpression content
}

/**
 * A table markup
 */
class RichStringTable extends RichStringMarkup {
}

/**
 * A table row markup
 */
class RichStringTableRow extends RichStringMarkup {
}

/**
 * A table cell markup
 */
class RichStringTableCell extends RichStringMarkup {
}

/**
 * A markup to open views
 */
class RichStringOpenView extends RichStringMarkup {
	String viewId
}

/**
 * A markup to start a process
 */
class RichStringStartProcess extends RichStringMarkup {
	String processId
}

/**
 * A markup to reference an entity document
 */
class RichStringEntityRef extends RichStringMarkup {
	refers LDocEntityDocument entityDoc
}

/**
 * A markup to reference a dto document
 */
class RichStringDTORef extends RichStringMarkup {
	refers LDocDtoDocument dtoDoc
}

/**
 * A markup to reference a user task document (bpm)
 */
class RichStringTaskRef extends RichStringMarkup {
	refers LDocHumanTaskDocument taskDoc
}

/**
 * A markup to reference a process document (bpm)
 */
class RichStringProcessRef extends RichStringMarkup {
	refers LDocBPMProcessDocument bpmDoc
}

/**
 * A markup to reference a view
 */
class RichStringViewRef extends RichStringMarkup {
	refers LDocViewDocument viewDoc
}

/**
 * A markup to reference a UI element 
 */
class RichStringUIRef extends RichStringMarkup {
	refers LDocUIDocument uiDoc
}

/**
 * A markup for unordered lists
 */
class RichStringList extends RichStringMarkup {
}

/**
 * A markup for ordered lists
 */
class RichStringOrderedList extends RichStringMarkup {
}

/**
 * A markup for list elements
 */
class RichStringListElement extends RichStringMarkup {
}

/**
 * A markup for span elements
 */
class RichStringSpan extends RichStringMarkup {
}

/**
 * A markup for a box element
 */
class RichStringBox extends RichStringMarkup {
	boolean error
	boolean warning
	boolean info
	boolean abstracts
	boolean checklist
	boolean bio
	boolean sidenote
	String title
}

/**
 * A markup for a container element
 */
class RichStringContainer extends RichStringMarkup {
}

/**
 * A markup for a column layout
 */
class RichStringColumnLayout extends RichStringMarkup {
}

/**
 * A markup for columns
 */
class RichStringColumn extends RichStringMarkup {
}

/**
 * A markup for footer
 */
class RichStringFooter extends RichStringContainer {
}

/**
 * A markup for header
 */
class RichStringHeader extends RichStringContainer {
}

/**
 * A markup for index
 */
class RichStringIndex extends RichStringContainer {
}

/**
 * A markup for index elements
 */
class RichStringIndexElement extends RichStringMarkup {
	refers IndexElement indexElement
}